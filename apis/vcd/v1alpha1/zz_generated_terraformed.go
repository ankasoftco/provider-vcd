/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ApiToken
func (mg *ApiToken) GetTerraformResourceType() string {
	return "vcd_api_token"
}

// GetConnectionDetailsMapping for this ApiToken
func (tr *ApiToken) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApiToken
func (tr *ApiToken) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApiToken
func (tr *ApiToken) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApiToken
func (tr *ApiToken) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApiToken
func (tr *ApiToken) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApiToken
func (tr *ApiToken) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApiToken using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApiToken) LateInitialize(attrs []byte) (bool, error) {
	params := &ApiTokenParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApiToken) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Catalog
func (mg *Catalog) GetTerraformResourceType() string {
	return "vcd_catalog"
}

// GetConnectionDetailsMapping for this Catalog
func (tr *Catalog) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this Catalog
func (tr *Catalog) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Catalog
func (tr *Catalog) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Catalog
func (tr *Catalog) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Catalog
func (tr *Catalog) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Catalog
func (tr *Catalog) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Catalog using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Catalog) LateInitialize(attrs []byte) (bool, error) {
	params := &CatalogParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Catalog) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this CatalogItem
func (mg *CatalogItem) GetTerraformResourceType() string {
	return "vcd_catalog_item"
}

// GetConnectionDetailsMapping for this CatalogItem
func (tr *CatalogItem) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this CatalogItem
func (tr *CatalogItem) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this CatalogItem
func (tr *CatalogItem) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this CatalogItem
func (tr *CatalogItem) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this CatalogItem
func (tr *CatalogItem) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this CatalogItem
func (tr *CatalogItem) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this CatalogItem using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *CatalogItem) LateInitialize(attrs []byte) (bool, error) {
	params := &CatalogItemParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *CatalogItem) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this CatalogMedia
func (mg *CatalogMedia) GetTerraformResourceType() string {
	return "vcd_catalog_media"
}

// GetConnectionDetailsMapping for this CatalogMedia
func (tr *CatalogMedia) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this CatalogMedia
func (tr *CatalogMedia) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this CatalogMedia
func (tr *CatalogMedia) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this CatalogMedia
func (tr *CatalogMedia) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this CatalogMedia
func (tr *CatalogMedia) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this CatalogMedia
func (tr *CatalogMedia) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this CatalogMedia using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *CatalogMedia) LateInitialize(attrs []byte) (bool, error) {
	params := &CatalogMediaParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *CatalogMedia) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this CatalogvAppTemplate
func (mg *CatalogvAppTemplate) GetTerraformResourceType() string {
	return "vcd_catalog_vapp_template"
}

// GetConnectionDetailsMapping for this CatalogvAppTemplate
func (tr *CatalogvAppTemplate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this CatalogvAppTemplate
func (tr *CatalogvAppTemplate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this CatalogvAppTemplate
func (tr *CatalogvAppTemplate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this CatalogvAppTemplate
func (tr *CatalogvAppTemplate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this CatalogvAppTemplate
func (tr *CatalogvAppTemplate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this CatalogvAppTemplate
func (tr *CatalogvAppTemplate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this CatalogvAppTemplate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *CatalogvAppTemplate) LateInitialize(attrs []byte) (bool, error) {
	params := &CatalogvAppTemplateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *CatalogvAppTemplate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ClonedvApp
func (mg *ClonedvApp) GetTerraformResourceType() string {
	return "vcd_cloned_vapp"
}

// GetConnectionDetailsMapping for this ClonedvApp
func (tr *ClonedvApp) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClonedvApp
func (tr *ClonedvApp) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClonedvApp
func (tr *ClonedvApp) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClonedvApp
func (tr *ClonedvApp) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClonedvApp
func (tr *ClonedvApp) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClonedvApp
func (tr *ClonedvApp) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClonedvApp using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClonedvApp) LateInitialize(attrs []byte) (bool, error) {
	params := &ClonedvAppParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClonedvApp) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Edgegateway
func (mg *Edgegateway) GetTerraformResourceType() string {
	return "vcd_edgegateway"
}

// GetConnectionDetailsMapping for this Edgegateway
func (tr *Edgegateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Edgegateway
func (tr *Edgegateway) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Edgegateway
func (tr *Edgegateway) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Edgegateway
func (tr *Edgegateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Edgegateway
func (tr *Edgegateway) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Edgegateway
func (tr *Edgegateway) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Edgegateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Edgegateway) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgegatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Edgegateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EdgegatewaySettings
func (mg *EdgegatewaySettings) GetTerraformResourceType() string {
	return "vcd_edgegateway_settings"
}

// GetConnectionDetailsMapping for this EdgegatewaySettings
func (tr *EdgegatewaySettings) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this EdgegatewaySettings
func (tr *EdgegatewaySettings) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EdgegatewaySettings
func (tr *EdgegatewaySettings) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EdgegatewaySettings
func (tr *EdgegatewaySettings) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EdgegatewaySettings
func (tr *EdgegatewaySettings) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EdgegatewaySettings
func (tr *EdgegatewaySettings) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EdgegatewaySettings using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EdgegatewaySettings) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgegatewaySettingsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EdgegatewaySettings) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EdgegatewayVPN
func (mg *EdgegatewayVPN) GetTerraformResourceType() string {
	return "vcd_edgegateway_vpn"
}

// GetConnectionDetailsMapping for this EdgegatewayVPN
func (tr *EdgegatewayVPN) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"shared_secret": "spec.forProvider.sharedSecretSecretRef"}
}

// GetObservation of this EdgegatewayVPN
func (tr *EdgegatewayVPN) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EdgegatewayVPN
func (tr *EdgegatewayVPN) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EdgegatewayVPN
func (tr *EdgegatewayVPN) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EdgegatewayVPN
func (tr *EdgegatewayVPN) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EdgegatewayVPN
func (tr *EdgegatewayVPN) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EdgegatewayVPN using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EdgegatewayVPN) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgegatewayVPNParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EdgegatewayVPN) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExternalNetwork
func (mg *ExternalNetwork) GetTerraformResourceType() string {
	return "vcd_external_network"
}

// GetConnectionDetailsMapping for this ExternalNetwork
func (tr *ExternalNetwork) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ExternalNetwork
func (tr *ExternalNetwork) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExternalNetwork
func (tr *ExternalNetwork) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExternalNetwork
func (tr *ExternalNetwork) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExternalNetwork
func (tr *ExternalNetwork) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExternalNetwork
func (tr *ExternalNetwork) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExternalNetwork using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExternalNetwork) LateInitialize(attrs []byte) (bool, error) {
	params := &ExternalNetworkParameters_2{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExternalNetwork) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExternalNetworkV2
func (mg *ExternalNetworkV2) GetTerraformResourceType() string {
	return "vcd_external_network_v2"
}

// GetConnectionDetailsMapping for this ExternalNetworkV2
func (tr *ExternalNetworkV2) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ExternalNetworkV2
func (tr *ExternalNetworkV2) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExternalNetworkV2
func (tr *ExternalNetworkV2) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExternalNetworkV2
func (tr *ExternalNetworkV2) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExternalNetworkV2
func (tr *ExternalNetworkV2) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExternalNetworkV2
func (tr *ExternalNetworkV2) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExternalNetworkV2 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExternalNetworkV2) LateInitialize(attrs []byte) (bool, error) {
	params := &ExternalNetworkV2Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExternalNetworkV2) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this GlobalRole
func (mg *GlobalRole) GetTerraformResourceType() string {
	return "vcd_global_role"
}

// GetConnectionDetailsMapping for this GlobalRole
func (tr *GlobalRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this GlobalRole
func (tr *GlobalRole) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this GlobalRole
func (tr *GlobalRole) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this GlobalRole
func (tr *GlobalRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this GlobalRole
func (tr *GlobalRole) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this GlobalRole
func (tr *GlobalRole) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this GlobalRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *GlobalRole) LateInitialize(attrs []byte) (bool, error) {
	params := &GlobalRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *GlobalRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IndependentDisk
func (mg *IndependentDisk) GetTerraformResourceType() string {
	return "vcd_independent_disk"
}

// GetConnectionDetailsMapping for this IndependentDisk
func (tr *IndependentDisk) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IndependentDisk
func (tr *IndependentDisk) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IndependentDisk
func (tr *IndependentDisk) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IndependentDisk
func (tr *IndependentDisk) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IndependentDisk
func (tr *IndependentDisk) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IndependentDisk
func (tr *IndependentDisk) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IndependentDisk using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IndependentDisk) LateInitialize(attrs []byte) (bool, error) {
	params := &IndependentDiskParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IndependentDisk) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InsertedMedia
func (mg *InsertedMedia) GetTerraformResourceType() string {
	return "vcd_inserted_media"
}

// GetConnectionDetailsMapping for this InsertedMedia
func (tr *InsertedMedia) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InsertedMedia
func (tr *InsertedMedia) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InsertedMedia
func (tr *InsertedMedia) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InsertedMedia
func (tr *InsertedMedia) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InsertedMedia
func (tr *InsertedMedia) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InsertedMedia
func (tr *InsertedMedia) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InsertedMedia using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InsertedMedia) LateInitialize(attrs []byte) (bool, error) {
	params := &InsertedMediaParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InsertedMedia) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpSpace
func (mg *IpSpace) GetTerraformResourceType() string {
	return "vcd_ip_space"
}

// GetConnectionDetailsMapping for this IpSpace
func (tr *IpSpace) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpSpace
func (tr *IpSpace) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpSpace
func (tr *IpSpace) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpSpace
func (tr *IpSpace) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpSpace
func (tr *IpSpace) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpSpace
func (tr *IpSpace) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpSpace using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpSpace) LateInitialize(attrs []byte) (bool, error) {
	params := &IpSpaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpSpace) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpSpaceCustomQuota
func (mg *IpSpaceCustomQuota) GetTerraformResourceType() string {
	return "vcd_ip_space_custom_quota"
}

// GetConnectionDetailsMapping for this IpSpaceCustomQuota
func (tr *IpSpaceCustomQuota) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpSpaceCustomQuota
func (tr *IpSpaceCustomQuota) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpSpaceCustomQuota
func (tr *IpSpaceCustomQuota) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpSpaceCustomQuota
func (tr *IpSpaceCustomQuota) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpSpaceCustomQuota
func (tr *IpSpaceCustomQuota) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpSpaceCustomQuota
func (tr *IpSpaceCustomQuota) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpSpaceCustomQuota using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpSpaceCustomQuota) LateInitialize(attrs []byte) (bool, error) {
	params := &IpSpaceCustomQuotaParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpSpaceCustomQuota) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpSpaceIpAllocation
func (mg *IpSpaceIpAllocation) GetTerraformResourceType() string {
	return "vcd_ip_space_ip_allocation"
}

// GetConnectionDetailsMapping for this IpSpaceIpAllocation
func (tr *IpSpaceIpAllocation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpSpaceIpAllocation
func (tr *IpSpaceIpAllocation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpSpaceIpAllocation
func (tr *IpSpaceIpAllocation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpSpaceIpAllocation
func (tr *IpSpaceIpAllocation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpSpaceIpAllocation
func (tr *IpSpaceIpAllocation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpSpaceIpAllocation
func (tr *IpSpaceIpAllocation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpSpaceIpAllocation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpSpaceIpAllocation) LateInitialize(attrs []byte) (bool, error) {
	params := &IpSpaceIpAllocationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpSpaceIpAllocation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpSpaceUplink
func (mg *IpSpaceUplink) GetTerraformResourceType() string {
	return "vcd_ip_space_uplink"
}

// GetConnectionDetailsMapping for this IpSpaceUplink
func (tr *IpSpaceUplink) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpSpaceUplink
func (tr *IpSpaceUplink) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpSpaceUplink
func (tr *IpSpaceUplink) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpSpaceUplink
func (tr *IpSpaceUplink) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpSpaceUplink
func (tr *IpSpaceUplink) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpSpaceUplink
func (tr *IpSpaceUplink) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpSpaceUplink using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpSpaceUplink) LateInitialize(attrs []byte) (bool, error) {
	params := &IpSpaceUplinkParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpSpaceUplink) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbAppProfile
func (mg *LbAppProfile) GetTerraformResourceType() string {
	return "vcd_lb_app_profile"
}

// GetConnectionDetailsMapping for this LbAppProfile
func (tr *LbAppProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbAppProfile
func (tr *LbAppProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbAppProfile
func (tr *LbAppProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbAppProfile
func (tr *LbAppProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbAppProfile
func (tr *LbAppProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbAppProfile
func (tr *LbAppProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbAppProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbAppProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbAppProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbAppProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbAppRule
func (mg *LbAppRule) GetTerraformResourceType() string {
	return "vcd_lb_app_rule"
}

// GetConnectionDetailsMapping for this LbAppRule
func (tr *LbAppRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbAppRule
func (tr *LbAppRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbAppRule
func (tr *LbAppRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbAppRule
func (tr *LbAppRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbAppRule
func (tr *LbAppRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbAppRule
func (tr *LbAppRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbAppRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbAppRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LbAppRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbAppRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbServerPool
func (mg *LbServerPool) GetTerraformResourceType() string {
	return "vcd_lb_server_pool"
}

// GetConnectionDetailsMapping for this LbServerPool
func (tr *LbServerPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbServerPool
func (tr *LbServerPool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbServerPool
func (tr *LbServerPool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbServerPool
func (tr *LbServerPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbServerPool
func (tr *LbServerPool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbServerPool
func (tr *LbServerPool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbServerPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbServerPool) LateInitialize(attrs []byte) (bool, error) {
	params := &LbServerPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbServerPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbServiceMonitor
func (mg *LbServiceMonitor) GetTerraformResourceType() string {
	return "vcd_lb_service_monitor"
}

// GetConnectionDetailsMapping for this LbServiceMonitor
func (tr *LbServiceMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbServiceMonitor
func (tr *LbServiceMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbServiceMonitor
func (tr *LbServiceMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbServiceMonitor
func (tr *LbServiceMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbServiceMonitor
func (tr *LbServiceMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbServiceMonitor
func (tr *LbServiceMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbServiceMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbServiceMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbServiceMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbServiceMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbVirtualServer
func (mg *LbVirtualServer) GetTerraformResourceType() string {
	return "vcd_lb_virtual_server"
}

// GetConnectionDetailsMapping for this LbVirtualServer
func (tr *LbVirtualServer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbVirtualServer
func (tr *LbVirtualServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbVirtualServer
func (tr *LbVirtualServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbVirtualServer
func (tr *LbVirtualServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbVirtualServer
func (tr *LbVirtualServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbVirtualServer
func (tr *LbVirtualServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbVirtualServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbVirtualServer) LateInitialize(attrs []byte) (bool, error) {
	params := &LbVirtualServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbVirtualServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NetworkDirect
func (mg *NetworkDirect) GetTerraformResourceType() string {
	return "vcd_network_direct"
}

// GetConnectionDetailsMapping for this NetworkDirect
func (tr *NetworkDirect) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NetworkDirect
func (tr *NetworkDirect) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NetworkDirect
func (tr *NetworkDirect) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NetworkDirect
func (tr *NetworkDirect) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NetworkDirect
func (tr *NetworkDirect) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NetworkDirect
func (tr *NetworkDirect) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NetworkDirect using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NetworkDirect) LateInitialize(attrs []byte) (bool, error) {
	params := &NetworkDirectParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NetworkDirect) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NetworkIsolated
func (mg *NetworkIsolated) GetTerraformResourceType() string {
	return "vcd_network_isolated"
}

// GetConnectionDetailsMapping for this NetworkIsolated
func (tr *NetworkIsolated) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NetworkIsolated
func (tr *NetworkIsolated) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NetworkIsolated
func (tr *NetworkIsolated) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NetworkIsolated
func (tr *NetworkIsolated) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NetworkIsolated
func (tr *NetworkIsolated) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NetworkIsolated
func (tr *NetworkIsolated) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NetworkIsolated using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NetworkIsolated) LateInitialize(attrs []byte) (bool, error) {
	params := &NetworkIsolatedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NetworkIsolated) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NetworkIsolatedV2
func (mg *NetworkIsolatedV2) GetTerraformResourceType() string {
	return "vcd_network_isolated_v2"
}

// GetConnectionDetailsMapping for this NetworkIsolatedV2
func (tr *NetworkIsolatedV2) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NetworkIsolatedV2
func (tr *NetworkIsolatedV2) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NetworkIsolatedV2
func (tr *NetworkIsolatedV2) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NetworkIsolatedV2
func (tr *NetworkIsolatedV2) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NetworkIsolatedV2
func (tr *NetworkIsolatedV2) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NetworkIsolatedV2
func (tr *NetworkIsolatedV2) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NetworkIsolatedV2 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NetworkIsolatedV2) LateInitialize(attrs []byte) (bool, error) {
	params := &NetworkIsolatedV2Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NetworkIsolatedV2) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NetworkRouted
func (mg *NetworkRouted) GetTerraformResourceType() string {
	return "vcd_network_routed"
}

// GetConnectionDetailsMapping for this NetworkRouted
func (tr *NetworkRouted) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NetworkRouted
func (tr *NetworkRouted) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NetworkRouted
func (tr *NetworkRouted) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NetworkRouted
func (tr *NetworkRouted) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NetworkRouted
func (tr *NetworkRouted) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NetworkRouted
func (tr *NetworkRouted) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NetworkRouted using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NetworkRouted) LateInitialize(attrs []byte) (bool, error) {
	params := &NetworkRoutedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NetworkRouted) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NetworkRoutedV2
func (mg *NetworkRoutedV2) GetTerraformResourceType() string {
	return "vcd_network_routed_v2"
}

// GetConnectionDetailsMapping for this NetworkRoutedV2
func (tr *NetworkRoutedV2) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NetworkRoutedV2
func (tr *NetworkRoutedV2) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NetworkRoutedV2
func (tr *NetworkRoutedV2) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NetworkRoutedV2
func (tr *NetworkRoutedV2) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NetworkRoutedV2
func (tr *NetworkRoutedV2) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NetworkRoutedV2
func (tr *NetworkRoutedV2) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NetworkRoutedV2 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NetworkRoutedV2) LateInitialize(attrs []byte) (bool, error) {
	params := &NetworkRoutedV2Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NetworkRoutedV2) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbCloud
func (mg *NsxtAlbCloud) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_cloud"
}

// GetConnectionDetailsMapping for this NsxtAlbCloud
func (tr *NsxtAlbCloud) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAlbCloud
func (tr *NsxtAlbCloud) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbCloud
func (tr *NsxtAlbCloud) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbCloud
func (tr *NsxtAlbCloud) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbCloud
func (tr *NsxtAlbCloud) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbCloud
func (tr *NsxtAlbCloud) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbCloud using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbCloud) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbCloudParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbCloud) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbController
func (mg *NsxtAlbController) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_controller"
}

// GetConnectionDetailsMapping for this NsxtAlbController
func (tr *NsxtAlbController) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this NsxtAlbController
func (tr *NsxtAlbController) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbController
func (tr *NsxtAlbController) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbController
func (tr *NsxtAlbController) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbController
func (tr *NsxtAlbController) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbController
func (tr *NsxtAlbController) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbController using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbController) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbControllerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbController) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbEdgegatewayServiceEngineGroup
func (mg *NsxtAlbEdgegatewayServiceEngineGroup) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_edgegateway_service_engine_group"
}

// GetConnectionDetailsMapping for this NsxtAlbEdgegatewayServiceEngineGroup
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAlbEdgegatewayServiceEngineGroup
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbEdgegatewayServiceEngineGroup
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbEdgegatewayServiceEngineGroup
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbEdgegatewayServiceEngineGroup
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbEdgegatewayServiceEngineGroup
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbEdgegatewayServiceEngineGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbEdgegatewayServiceEngineGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbEdgegatewayServiceEngineGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbPool
func (mg *NsxtAlbPool) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_pool"
}

// GetConnectionDetailsMapping for this NsxtAlbPool
func (tr *NsxtAlbPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAlbPool
func (tr *NsxtAlbPool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbPool
func (tr *NsxtAlbPool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbPool
func (tr *NsxtAlbPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbPool
func (tr *NsxtAlbPool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbPool
func (tr *NsxtAlbPool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbPool) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbServiceEngineGroup
func (mg *NsxtAlbServiceEngineGroup) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_service_engine_group"
}

// GetConnectionDetailsMapping for this NsxtAlbServiceEngineGroup
func (tr *NsxtAlbServiceEngineGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAlbServiceEngineGroup
func (tr *NsxtAlbServiceEngineGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbServiceEngineGroup
func (tr *NsxtAlbServiceEngineGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbServiceEngineGroup
func (tr *NsxtAlbServiceEngineGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbServiceEngineGroup
func (tr *NsxtAlbServiceEngineGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbServiceEngineGroup
func (tr *NsxtAlbServiceEngineGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbServiceEngineGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbServiceEngineGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbServiceEngineGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbServiceEngineGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbSettings
func (mg *NsxtAlbSettings) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_settings"
}

// GetConnectionDetailsMapping for this NsxtAlbSettings
func (tr *NsxtAlbSettings) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAlbSettings
func (tr *NsxtAlbSettings) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbSettings
func (tr *NsxtAlbSettings) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbSettings
func (tr *NsxtAlbSettings) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbSettings
func (tr *NsxtAlbSettings) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbSettings
func (tr *NsxtAlbSettings) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbSettings using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbSettings) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbSettingsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbSettings) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAlbVirtualService
func (mg *NsxtAlbVirtualService) GetTerraformResourceType() string {
	return "vcd_nsxt_alb_virtual_service"
}

// GetConnectionDetailsMapping for this NsxtAlbVirtualService
func (tr *NsxtAlbVirtualService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAlbVirtualService
func (tr *NsxtAlbVirtualService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAlbVirtualService
func (tr *NsxtAlbVirtualService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAlbVirtualService
func (tr *NsxtAlbVirtualService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAlbVirtualService
func (tr *NsxtAlbVirtualService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAlbVirtualService
func (tr *NsxtAlbVirtualService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAlbVirtualService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAlbVirtualService) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAlbVirtualServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAlbVirtualService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtAppPortProfile
func (mg *NsxtAppPortProfile) GetTerraformResourceType() string {
	return "vcd_nsxt_app_port_profile"
}

// GetConnectionDetailsMapping for this NsxtAppPortProfile
func (tr *NsxtAppPortProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtAppPortProfile
func (tr *NsxtAppPortProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtAppPortProfile
func (tr *NsxtAppPortProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtAppPortProfile
func (tr *NsxtAppPortProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtAppPortProfile
func (tr *NsxtAppPortProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtAppPortProfile
func (tr *NsxtAppPortProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtAppPortProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtAppPortProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtAppPortProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtAppPortProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtDistributedFirewall
func (mg *NsxtDistributedFirewall) GetTerraformResourceType() string {
	return "vcd_nsxt_distributed_firewall"
}

// GetConnectionDetailsMapping for this NsxtDistributedFirewall
func (tr *NsxtDistributedFirewall) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtDistributedFirewall
func (tr *NsxtDistributedFirewall) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtDistributedFirewall
func (tr *NsxtDistributedFirewall) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtDistributedFirewall
func (tr *NsxtDistributedFirewall) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtDistributedFirewall
func (tr *NsxtDistributedFirewall) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtDistributedFirewall
func (tr *NsxtDistributedFirewall) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtDistributedFirewall using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtDistributedFirewall) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtDistributedFirewallParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtDistributedFirewall) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtDistributedFirewallRule
func (mg *NsxtDistributedFirewallRule) GetTerraformResourceType() string {
	return "vcd_nsxt_distributed_firewall_rule"
}

// GetConnectionDetailsMapping for this NsxtDistributedFirewallRule
func (tr *NsxtDistributedFirewallRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtDistributedFirewallRule
func (tr *NsxtDistributedFirewallRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtDistributedFirewallRule
func (tr *NsxtDistributedFirewallRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtDistributedFirewallRule
func (tr *NsxtDistributedFirewallRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtDistributedFirewallRule
func (tr *NsxtDistributedFirewallRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtDistributedFirewallRule
func (tr *NsxtDistributedFirewallRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtDistributedFirewallRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtDistributedFirewallRule) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtDistributedFirewallRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtDistributedFirewallRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtDynamicSecurityGroup
func (mg *NsxtDynamicSecurityGroup) GetTerraformResourceType() string {
	return "vcd_nsxt_dynamic_security_group"
}

// GetConnectionDetailsMapping for this NsxtDynamicSecurityGroup
func (tr *NsxtDynamicSecurityGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtDynamicSecurityGroup
func (tr *NsxtDynamicSecurityGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtDynamicSecurityGroup
func (tr *NsxtDynamicSecurityGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtDynamicSecurityGroup
func (tr *NsxtDynamicSecurityGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtDynamicSecurityGroup
func (tr *NsxtDynamicSecurityGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtDynamicSecurityGroup
func (tr *NsxtDynamicSecurityGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtDynamicSecurityGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtDynamicSecurityGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtDynamicSecurityGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtDynamicSecurityGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgeGateway
func (mg *NsxtEdgeGateway) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway"
}

// GetConnectionDetailsMapping for this NsxtEdgeGateway
func (tr *NsxtEdgeGateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtEdgeGateway
func (tr *NsxtEdgeGateway) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgeGateway
func (tr *NsxtEdgeGateway) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgeGateway
func (tr *NsxtEdgeGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgeGateway
func (tr *NsxtEdgeGateway) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgeGateway
func (tr *NsxtEdgeGateway) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgeGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgeGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgeGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgeGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgegatewayBgpConfiguration
func (mg *NsxtEdgegatewayBgpConfiguration) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway_bgp_configuration"
}

// GetConnectionDetailsMapping for this NsxtEdgegatewayBgpConfiguration
func (tr *NsxtEdgegatewayBgpConfiguration) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtEdgegatewayBgpConfiguration
func (tr *NsxtEdgegatewayBgpConfiguration) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgegatewayBgpConfiguration
func (tr *NsxtEdgegatewayBgpConfiguration) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgegatewayBgpConfiguration
func (tr *NsxtEdgegatewayBgpConfiguration) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgegatewayBgpConfiguration
func (tr *NsxtEdgegatewayBgpConfiguration) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgegatewayBgpConfiguration
func (tr *NsxtEdgegatewayBgpConfiguration) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgegatewayBgpConfiguration using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgegatewayBgpConfiguration) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgegatewayBgpConfigurationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgegatewayBgpConfiguration) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgeGatewayBgpIpPrefixList
func (mg *NsxtEdgeGatewayBgpIpPrefixList) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway_bgp_ip_prefix_list"
}

// GetConnectionDetailsMapping for this NsxtEdgeGatewayBgpIpPrefixList
func (tr *NsxtEdgeGatewayBgpIpPrefixList) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtEdgeGatewayBgpIpPrefixList
func (tr *NsxtEdgeGatewayBgpIpPrefixList) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgeGatewayBgpIpPrefixList
func (tr *NsxtEdgeGatewayBgpIpPrefixList) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgeGatewayBgpIpPrefixList
func (tr *NsxtEdgeGatewayBgpIpPrefixList) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgeGatewayBgpIpPrefixList
func (tr *NsxtEdgeGatewayBgpIpPrefixList) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgeGatewayBgpIpPrefixList
func (tr *NsxtEdgeGatewayBgpIpPrefixList) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgeGatewayBgpIpPrefixList using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgeGatewayBgpIpPrefixList) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgeGatewayBgpIpPrefixListParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgeGatewayBgpIpPrefixList) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgeGatewayBgpNeighbor
func (mg *NsxtEdgeGatewayBgpNeighbor) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway_bgp_neighbor"
}

// GetConnectionDetailsMapping for this NsxtEdgeGatewayBgpNeighbor
func (tr *NsxtEdgeGatewayBgpNeighbor) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this NsxtEdgeGatewayBgpNeighbor
func (tr *NsxtEdgeGatewayBgpNeighbor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgeGatewayBgpNeighbor
func (tr *NsxtEdgeGatewayBgpNeighbor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgeGatewayBgpNeighbor
func (tr *NsxtEdgeGatewayBgpNeighbor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgeGatewayBgpNeighbor
func (tr *NsxtEdgeGatewayBgpNeighbor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgeGatewayBgpNeighbor
func (tr *NsxtEdgeGatewayBgpNeighbor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgeGatewayBgpNeighbor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgeGatewayBgpNeighbor) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgeGatewayBgpNeighborParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgeGatewayBgpNeighbor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgeGatewayDhcpV6
func (mg *NsxtEdgeGatewayDhcpV6) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway_dhcpv6"
}

// GetConnectionDetailsMapping for this NsxtEdgeGatewayDhcpV6
func (tr *NsxtEdgeGatewayDhcpV6) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtEdgeGatewayDhcpV6
func (tr *NsxtEdgeGatewayDhcpV6) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgeGatewayDhcpV6
func (tr *NsxtEdgeGatewayDhcpV6) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgeGatewayDhcpV6
func (tr *NsxtEdgeGatewayDhcpV6) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgeGatewayDhcpV6
func (tr *NsxtEdgeGatewayDhcpV6) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgeGatewayDhcpV6
func (tr *NsxtEdgeGatewayDhcpV6) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgeGatewayDhcpV6 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgeGatewayDhcpV6) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgeGatewayDhcpV6Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgeGatewayDhcpV6) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgeGatewayRateLimit
func (mg *NsxtEdgeGatewayRateLimit) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway_rate_limiting"
}

// GetConnectionDetailsMapping for this NsxtEdgeGatewayRateLimit
func (tr *NsxtEdgeGatewayRateLimit) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtEdgeGatewayRateLimit
func (tr *NsxtEdgeGatewayRateLimit) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgeGatewayRateLimit
func (tr *NsxtEdgeGatewayRateLimit) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgeGatewayRateLimit
func (tr *NsxtEdgeGatewayRateLimit) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgeGatewayRateLimit
func (tr *NsxtEdgeGatewayRateLimit) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgeGatewayRateLimit
func (tr *NsxtEdgeGatewayRateLimit) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgeGatewayRateLimit using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgeGatewayRateLimit) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgeGatewayRateLimitParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgeGatewayRateLimit) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtEdgeGatewayStaticRoute
func (mg *NsxtEdgeGatewayStaticRoute) GetTerraformResourceType() string {
	return "vcd_nsxt_edgegateway_static_route"
}

// GetConnectionDetailsMapping for this NsxtEdgeGatewayStaticRoute
func (tr *NsxtEdgeGatewayStaticRoute) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtEdgeGatewayStaticRoute
func (tr *NsxtEdgeGatewayStaticRoute) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtEdgeGatewayStaticRoute
func (tr *NsxtEdgeGatewayStaticRoute) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtEdgeGatewayStaticRoute
func (tr *NsxtEdgeGatewayStaticRoute) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtEdgeGatewayStaticRoute
func (tr *NsxtEdgeGatewayStaticRoute) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtEdgeGatewayStaticRoute
func (tr *NsxtEdgeGatewayStaticRoute) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtEdgeGatewayStaticRoute using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtEdgeGatewayStaticRoute) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtEdgeGatewayStaticRouteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtEdgeGatewayStaticRoute) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtFirewall
func (mg *NsxtFirewall) GetTerraformResourceType() string {
	return "vcd_nsxt_firewall"
}

// GetConnectionDetailsMapping for this NsxtFirewall
func (tr *NsxtFirewall) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtFirewall
func (tr *NsxtFirewall) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtFirewall
func (tr *NsxtFirewall) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtFirewall
func (tr *NsxtFirewall) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtFirewall
func (tr *NsxtFirewall) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtFirewall
func (tr *NsxtFirewall) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtFirewall using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtFirewall) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtFirewallParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtFirewall) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtIpSet
func (mg *NsxtIpSet) GetTerraformResourceType() string {
	return "vcd_nsxt_ip_set"
}

// GetConnectionDetailsMapping for this NsxtIpSet
func (tr *NsxtIpSet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtIpSet
func (tr *NsxtIpSet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtIpSet
func (tr *NsxtIpSet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtIpSet
func (tr *NsxtIpSet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtIpSet
func (tr *NsxtIpSet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtIpSet
func (tr *NsxtIpSet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtIpSet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtIpSet) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtIpSetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtIpSet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtIpsecVpnTunnel
func (mg *NsxtIpsecVpnTunnel) GetTerraformResourceType() string {
	return "vcd_nsxt_ipsec_vpn_tunnel"
}

// GetConnectionDetailsMapping for this NsxtIpsecVpnTunnel
func (tr *NsxtIpsecVpnTunnel) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"pre_shared_key": "spec.forProvider.preSharedKeySecretRef"}
}

// GetObservation of this NsxtIpsecVpnTunnel
func (tr *NsxtIpsecVpnTunnel) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtIpsecVpnTunnel
func (tr *NsxtIpsecVpnTunnel) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtIpsecVpnTunnel
func (tr *NsxtIpsecVpnTunnel) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtIpsecVpnTunnel
func (tr *NsxtIpsecVpnTunnel) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtIpsecVpnTunnel
func (tr *NsxtIpsecVpnTunnel) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtIpsecVpnTunnel using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtIpsecVpnTunnel) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtIpsecVpnTunnelParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtIpsecVpnTunnel) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtNatRule
func (mg *NsxtNatRule) GetTerraformResourceType() string {
	return "vcd_nsxt_nat_rule"
}

// GetConnectionDetailsMapping for this NsxtNatRule
func (tr *NsxtNatRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtNatRule
func (tr *NsxtNatRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtNatRule
func (tr *NsxtNatRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtNatRule
func (tr *NsxtNatRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtNatRule
func (tr *NsxtNatRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtNatRule
func (tr *NsxtNatRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtNatRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtNatRule) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtNatRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtNatRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtNetworkDhcp
func (mg *NsxtNetworkDhcp) GetTerraformResourceType() string {
	return "vcd_nsxt_network_dhcp"
}

// GetConnectionDetailsMapping for this NsxtNetworkDhcp
func (tr *NsxtNetworkDhcp) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtNetworkDhcp
func (tr *NsxtNetworkDhcp) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtNetworkDhcp
func (tr *NsxtNetworkDhcp) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtNetworkDhcp
func (tr *NsxtNetworkDhcp) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtNetworkDhcp
func (tr *NsxtNetworkDhcp) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtNetworkDhcp
func (tr *NsxtNetworkDhcp) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtNetworkDhcp using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtNetworkDhcp) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtNetworkDhcpParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtNetworkDhcp) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtNetworkDhcpBinding
func (mg *NsxtNetworkDhcpBinding) GetTerraformResourceType() string {
	return "vcd_nsxt_network_dhcp_binding"
}

// GetConnectionDetailsMapping for this NsxtNetworkDhcpBinding
func (tr *NsxtNetworkDhcpBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtNetworkDhcpBinding
func (tr *NsxtNetworkDhcpBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtNetworkDhcpBinding
func (tr *NsxtNetworkDhcpBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtNetworkDhcpBinding
func (tr *NsxtNetworkDhcpBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtNetworkDhcpBinding
func (tr *NsxtNetworkDhcpBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtNetworkDhcpBinding
func (tr *NsxtNetworkDhcpBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtNetworkDhcpBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtNetworkDhcpBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtNetworkDhcpBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtNetworkDhcpBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtNetworkImported
func (mg *NsxtNetworkImported) GetTerraformResourceType() string {
	return "vcd_nsxt_network_imported"
}

// GetConnectionDetailsMapping for this NsxtNetworkImported
func (tr *NsxtNetworkImported) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtNetworkImported
func (tr *NsxtNetworkImported) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtNetworkImported
func (tr *NsxtNetworkImported) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtNetworkImported
func (tr *NsxtNetworkImported) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtNetworkImported
func (tr *NsxtNetworkImported) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtNetworkImported
func (tr *NsxtNetworkImported) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtNetworkImported using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtNetworkImported) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtNetworkImportedParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtNetworkImported) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtRouteAdvertisement
func (mg *NsxtRouteAdvertisement) GetTerraformResourceType() string {
	return "vcd_nsxt_route_advertisement"
}

// GetConnectionDetailsMapping for this NsxtRouteAdvertisement
func (tr *NsxtRouteAdvertisement) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtRouteAdvertisement
func (tr *NsxtRouteAdvertisement) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtRouteAdvertisement
func (tr *NsxtRouteAdvertisement) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtRouteAdvertisement
func (tr *NsxtRouteAdvertisement) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtRouteAdvertisement
func (tr *NsxtRouteAdvertisement) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtRouteAdvertisement
func (tr *NsxtRouteAdvertisement) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtRouteAdvertisement using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtRouteAdvertisement) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtRouteAdvertisementParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtRouteAdvertisement) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxtSecurityGroup
func (mg *NsxtSecurityGroup) GetTerraformResourceType() string {
	return "vcd_nsxt_security_group"
}

// GetConnectionDetailsMapping for this NsxtSecurityGroup
func (tr *NsxtSecurityGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxtSecurityGroup
func (tr *NsxtSecurityGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxtSecurityGroup
func (tr *NsxtSecurityGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxtSecurityGroup
func (tr *NsxtSecurityGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxtSecurityGroup
func (tr *NsxtSecurityGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxtSecurityGroup
func (tr *NsxtSecurityGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxtSecurityGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxtSecurityGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxtSecurityGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxtSecurityGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxvDhcpRelay
func (mg *NsxvDhcpRelay) GetTerraformResourceType() string {
	return "vcd_nsxv_dhcp_relay"
}

// GetConnectionDetailsMapping for this NsxvDhcpRelay
func (tr *NsxvDhcpRelay) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxvDhcpRelay
func (tr *NsxvDhcpRelay) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxvDhcpRelay
func (tr *NsxvDhcpRelay) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxvDhcpRelay
func (tr *NsxvDhcpRelay) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxvDhcpRelay
func (tr *NsxvDhcpRelay) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxvDhcpRelay
func (tr *NsxvDhcpRelay) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxvDhcpRelay using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxvDhcpRelay) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxvDhcpRelayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxvDhcpRelay) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxvDistributedFirewall
func (mg *NsxvDistributedFirewall) GetTerraformResourceType() string {
	return "vcd_nsxv_distributed_firewall"
}

// GetConnectionDetailsMapping for this NsxvDistributedFirewall
func (tr *NsxvDistributedFirewall) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxvDistributedFirewall
func (tr *NsxvDistributedFirewall) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxvDistributedFirewall
func (tr *NsxvDistributedFirewall) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxvDistributedFirewall
func (tr *NsxvDistributedFirewall) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxvDistributedFirewall
func (tr *NsxvDistributedFirewall) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxvDistributedFirewall
func (tr *NsxvDistributedFirewall) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxvDistributedFirewall using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxvDistributedFirewall) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxvDistributedFirewallParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxvDistributedFirewall) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxvDnat
func (mg *NsxvDnat) GetTerraformResourceType() string {
	return "vcd_nsxv_dnat"
}

// GetConnectionDetailsMapping for this NsxvDnat
func (tr *NsxvDnat) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxvDnat
func (tr *NsxvDnat) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxvDnat
func (tr *NsxvDnat) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxvDnat
func (tr *NsxvDnat) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxvDnat
func (tr *NsxvDnat) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxvDnat
func (tr *NsxvDnat) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxvDnat using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxvDnat) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxvDnatParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxvDnat) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxvFirewallRule
func (mg *NsxvFirewallRule) GetTerraformResourceType() string {
	return "vcd_nsxv_firewall_rule"
}

// GetConnectionDetailsMapping for this NsxvFirewallRule
func (tr *NsxvFirewallRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxvFirewallRule
func (tr *NsxvFirewallRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxvFirewallRule
func (tr *NsxvFirewallRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxvFirewallRule
func (tr *NsxvFirewallRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxvFirewallRule
func (tr *NsxvFirewallRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxvFirewallRule
func (tr *NsxvFirewallRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxvFirewallRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxvFirewallRule) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxvFirewallRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxvFirewallRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxvIpSet
func (mg *NsxvIpSet) GetTerraformResourceType() string {
	return "vcd_nsxv_ip_set"
}

// GetConnectionDetailsMapping for this NsxvIpSet
func (tr *NsxvIpSet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxvIpSet
func (tr *NsxvIpSet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxvIpSet
func (tr *NsxvIpSet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxvIpSet
func (tr *NsxvIpSet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxvIpSet
func (tr *NsxvIpSet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxvIpSet
func (tr *NsxvIpSet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxvIpSet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxvIpSet) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxvIpSetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxvIpSet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsxvSnat
func (mg *NsxvSnat) GetTerraformResourceType() string {
	return "vcd_nsxv_snat"
}

// GetConnectionDetailsMapping for this NsxvSnat
func (tr *NsxvSnat) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsxvSnat
func (tr *NsxvSnat) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsxvSnat
func (tr *NsxvSnat) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsxvSnat
func (tr *NsxvSnat) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsxvSnat
func (tr *NsxvSnat) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsxvSnat
func (tr *NsxvSnat) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsxvSnat using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsxvSnat) LateInitialize(attrs []byte) (bool, error) {
	params := &NsxvSnatParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsxvSnat) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Org
func (mg *Org) GetTerraformResourceType() string {
	return "vcd_org"
}

// GetConnectionDetailsMapping for this Org
func (tr *Org) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Org
func (tr *Org) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Org
func (tr *Org) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Org
func (tr *Org) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Org
func (tr *Org) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Org
func (tr *Org) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Org using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Org) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Org) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this OrgGroup
func (mg *OrgGroup) GetTerraformResourceType() string {
	return "vcd_org_group"
}

// GetConnectionDetailsMapping for this OrgGroup
func (tr *OrgGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this OrgGroup
func (tr *OrgGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this OrgGroup
func (tr *OrgGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this OrgGroup
func (tr *OrgGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this OrgGroup
func (tr *OrgGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this OrgGroup
func (tr *OrgGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this OrgGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *OrgGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *OrgGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this OrgLdap
func (mg *OrgLdap) GetTerraformResourceType() string {
	return "vcd_org_ldap"
}

// GetConnectionDetailsMapping for this OrgLdap
func (tr *OrgLdap) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"custom_settings[*].password": "spec.forProvider.customSettings[*].passwordSecretRef"}
}

// GetObservation of this OrgLdap
func (tr *OrgLdap) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this OrgLdap
func (tr *OrgLdap) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this OrgLdap
func (tr *OrgLdap) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this OrgLdap
func (tr *OrgLdap) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this OrgLdap
func (tr *OrgLdap) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this OrgLdap using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *OrgLdap) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgLdapParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *OrgLdap) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this OrgSaml
func (mg *OrgSaml) GetTerraformResourceType() string {
	return "vcd_org_saml"
}

// GetConnectionDetailsMapping for this OrgSaml
func (tr *OrgSaml) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this OrgSaml
func (tr *OrgSaml) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this OrgSaml
func (tr *OrgSaml) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this OrgSaml
func (tr *OrgSaml) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this OrgSaml
func (tr *OrgSaml) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this OrgSaml
func (tr *OrgSaml) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this OrgSaml using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *OrgSaml) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgSamlParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *OrgSaml) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this OrgUser
func (mg *OrgUser) GetTerraformResourceType() string {
	return "vcd_org_user"
}

// GetConnectionDetailsMapping for this OrgUser
func (tr *OrgUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this OrgUser
func (tr *OrgUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this OrgUser
func (tr *OrgUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this OrgUser
func (tr *OrgUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this OrgUser
func (tr *OrgUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this OrgUser
func (tr *OrgUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this OrgUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *OrgUser) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *OrgUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this OrgVdc
func (mg *OrgVdc) GetTerraformResourceType() string {
	return "vcd_org_vdc"
}

// GetConnectionDetailsMapping for this OrgVdc
func (tr *OrgVdc) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this OrgVdc
func (tr *OrgVdc) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this OrgVdc
func (tr *OrgVdc) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this OrgVdc
func (tr *OrgVdc) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this OrgVdc
func (tr *OrgVdc) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this OrgVdc
func (tr *OrgVdc) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this OrgVdc using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *OrgVdc) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgVdcParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *OrgVdc) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this OrgVdcAccessControl
func (mg *OrgVdcAccessControl) GetTerraformResourceType() string {
	return "vcd_org_vdc_access_control"
}

// GetConnectionDetailsMapping for this OrgVdcAccessControl
func (tr *OrgVdcAccessControl) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this OrgVdcAccessControl
func (tr *OrgVdcAccessControl) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this OrgVdcAccessControl
func (tr *OrgVdcAccessControl) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this OrgVdcAccessControl
func (tr *OrgVdcAccessControl) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this OrgVdcAccessControl
func (tr *OrgVdcAccessControl) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this OrgVdcAccessControl
func (tr *OrgVdcAccessControl) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this OrgVdcAccessControl using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *OrgVdcAccessControl) LateInitialize(attrs []byte) (bool, error) {
	params := &OrgVdcAccessControlParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *OrgVdcAccessControl) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ProviderVdc
func (mg *ProviderVdc) GetTerraformResourceType() string {
	return "vcd_provider_vdc"
}

// GetConnectionDetailsMapping for this ProviderVdc
func (tr *ProviderVdc) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ProviderVdc
func (tr *ProviderVdc) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ProviderVdc
func (tr *ProviderVdc) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ProviderVdc
func (tr *ProviderVdc) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ProviderVdc
func (tr *ProviderVdc) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ProviderVdc
func (tr *ProviderVdc) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ProviderVdc using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ProviderVdc) LateInitialize(attrs []byte) (bool, error) {
	params := &ProviderVdcParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ProviderVdc) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Rde
func (mg *Rde) GetTerraformResourceType() string {
	return "vcd_rde"
}

// GetConnectionDetailsMapping for this Rde
func (tr *Rde) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Rde
func (tr *Rde) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Rde
func (tr *Rde) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Rde
func (tr *Rde) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Rde
func (tr *Rde) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Rde
func (tr *Rde) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Rde using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Rde) LateInitialize(attrs []byte) (bool, error) {
	params := &RdeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Rde) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RdeInterface
func (mg *RdeInterface) GetTerraformResourceType() string {
	return "vcd_rde_interface"
}

// GetConnectionDetailsMapping for this RdeInterface
func (tr *RdeInterface) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RdeInterface
func (tr *RdeInterface) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RdeInterface
func (tr *RdeInterface) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RdeInterface
func (tr *RdeInterface) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RdeInterface
func (tr *RdeInterface) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RdeInterface
func (tr *RdeInterface) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RdeInterface using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RdeInterface) LateInitialize(attrs []byte) (bool, error) {
	params := &RdeInterfaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RdeInterface) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RdeInterfaceBehavior
func (mg *RdeInterfaceBehavior) GetTerraformResourceType() string {
	return "vcd_rde_interface_behavior"
}

// GetConnectionDetailsMapping for this RdeInterfaceBehavior
func (tr *RdeInterfaceBehavior) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RdeInterfaceBehavior
func (tr *RdeInterfaceBehavior) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RdeInterfaceBehavior
func (tr *RdeInterfaceBehavior) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RdeInterfaceBehavior
func (tr *RdeInterfaceBehavior) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RdeInterfaceBehavior
func (tr *RdeInterfaceBehavior) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RdeInterfaceBehavior
func (tr *RdeInterfaceBehavior) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RdeInterfaceBehavior using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RdeInterfaceBehavior) LateInitialize(attrs []byte) (bool, error) {
	params := &RdeInterfaceBehaviorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RdeInterfaceBehavior) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RdeType
func (mg *RdeType) GetTerraformResourceType() string {
	return "vcd_rde_type"
}

// GetConnectionDetailsMapping for this RdeType
func (tr *RdeType) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RdeType
func (tr *RdeType) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RdeType
func (tr *RdeType) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RdeType
func (tr *RdeType) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RdeType
func (tr *RdeType) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RdeType
func (tr *RdeType) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RdeType using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RdeType) LateInitialize(attrs []byte) (bool, error) {
	params := &RdeTypeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RdeType) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RdeTypeBehavior
func (mg *RdeTypeBehavior) GetTerraformResourceType() string {
	return "vcd_rde_type_behavior"
}

// GetConnectionDetailsMapping for this RdeTypeBehavior
func (tr *RdeTypeBehavior) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RdeTypeBehavior
func (tr *RdeTypeBehavior) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RdeTypeBehavior
func (tr *RdeTypeBehavior) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RdeTypeBehavior
func (tr *RdeTypeBehavior) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RdeTypeBehavior
func (tr *RdeTypeBehavior) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RdeTypeBehavior
func (tr *RdeTypeBehavior) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RdeTypeBehavior using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RdeTypeBehavior) LateInitialize(attrs []byte) (bool, error) {
	params := &RdeTypeBehaviorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RdeTypeBehavior) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RdeTypeBehaviorAcl
func (mg *RdeTypeBehaviorAcl) GetTerraformResourceType() string {
	return "vcd_rde_type_behavior_acl"
}

// GetConnectionDetailsMapping for this RdeTypeBehaviorAcl
func (tr *RdeTypeBehaviorAcl) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RdeTypeBehaviorAcl
func (tr *RdeTypeBehaviorAcl) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RdeTypeBehaviorAcl
func (tr *RdeTypeBehaviorAcl) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RdeTypeBehaviorAcl
func (tr *RdeTypeBehaviorAcl) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RdeTypeBehaviorAcl
func (tr *RdeTypeBehaviorAcl) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RdeTypeBehaviorAcl
func (tr *RdeTypeBehaviorAcl) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RdeTypeBehaviorAcl using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RdeTypeBehaviorAcl) LateInitialize(attrs []byte) (bool, error) {
	params := &RdeTypeBehaviorAclParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RdeTypeBehaviorAcl) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RightsBundle
func (mg *RightsBundle) GetTerraformResourceType() string {
	return "vcd_rights_bundle"
}

// GetConnectionDetailsMapping for this RightsBundle
func (tr *RightsBundle) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this RightsBundle
func (tr *RightsBundle) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RightsBundle
func (tr *RightsBundle) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RightsBundle
func (tr *RightsBundle) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RightsBundle
func (tr *RightsBundle) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RightsBundle
func (tr *RightsBundle) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RightsBundle using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RightsBundle) LateInitialize(attrs []byte) (bool, error) {
	params := &RightsBundleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RightsBundle) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Role
func (mg *Role) GetTerraformResourceType() string {
	return "vcd_role"
}

// GetConnectionDetailsMapping for this Role
func (tr *Role) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Role
func (tr *Role) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Role
func (tr *Role) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Role
func (tr *Role) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Role
func (tr *Role) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Role
func (tr *Role) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Role using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Role) LateInitialize(attrs []byte) (bool, error) {
	params := &RoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Role) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecurityTag
func (mg *SecurityTag) GetTerraformResourceType() string {
	return "vcd_security_tag"
}

// GetConnectionDetailsMapping for this SecurityTag
func (tr *SecurityTag) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecurityTag
func (tr *SecurityTag) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecurityTag
func (tr *SecurityTag) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecurityTag
func (tr *SecurityTag) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecurityTag
func (tr *SecurityTag) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecurityTag
func (tr *SecurityTag) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SecurityTag using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecurityTag) LateInitialize(attrs []byte) (bool, error) {
	params := &SecurityTagParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecurityTag) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ServiceAccount
func (mg *ServiceAccount) GetTerraformResourceType() string {
	return "vcd_service_account"
}

// GetConnectionDetailsMapping for this ServiceAccount
func (tr *ServiceAccount) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ServiceAccount
func (tr *ServiceAccount) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ServiceAccount
func (tr *ServiceAccount) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ServiceAccount
func (tr *ServiceAccount) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ServiceAccount
func (tr *ServiceAccount) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ServiceAccount
func (tr *ServiceAccount) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ServiceAccount using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ServiceAccount) LateInitialize(attrs []byte) (bool, error) {
	params := &ServiceAccountParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ServiceAccount) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SubscribedCatalog
func (mg *SubscribedCatalog) GetTerraformResourceType() string {
	return "vcd_subscribed_catalog"
}

// GetConnectionDetailsMapping for this SubscribedCatalog
func (tr *SubscribedCatalog) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"subscription_password": "spec.forProvider.subscriptionPasswordSecretRef"}
}

// GetObservation of this SubscribedCatalog
func (tr *SubscribedCatalog) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SubscribedCatalog
func (tr *SubscribedCatalog) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SubscribedCatalog
func (tr *SubscribedCatalog) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SubscribedCatalog
func (tr *SubscribedCatalog) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SubscribedCatalog
func (tr *SubscribedCatalog) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SubscribedCatalog using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SubscribedCatalog) LateInitialize(attrs []byte) (bool, error) {
	params := &SubscribedCatalogParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SubscribedCatalog) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UiPlugin
func (mg *UiPlugin) GetTerraformResourceType() string {
	return "vcd_ui_plugin"
}

// GetConnectionDetailsMapping for this UiPlugin
func (tr *UiPlugin) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UiPlugin
func (tr *UiPlugin) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UiPlugin
func (tr *UiPlugin) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UiPlugin
func (tr *UiPlugin) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UiPlugin
func (tr *UiPlugin) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UiPlugin
func (tr *UiPlugin) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UiPlugin using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UiPlugin) LateInitialize(attrs []byte) (bool, error) {
	params := &UiPluginParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UiPlugin) GetTerraformSchemaVersion() int {
	return 0
}
