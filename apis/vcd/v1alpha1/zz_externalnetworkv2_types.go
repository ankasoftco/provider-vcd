/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExternalNetworkV2IPScopeObservation struct {

	// DNS suffix
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Primary DNS server
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Secondary DNS server
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// If subnet is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Gateway of the network
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Network mask
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// IP ranges used for static pool allocation in the network
	StaticIPPool []IPScopeStaticIPPoolObservation `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type ExternalNetworkV2IPScopeParameters struct {

	// DNS suffix
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Primary DNS server
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Secondary DNS server
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// If subnet is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Gateway of the network
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// Network mask
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// IP ranges used for static pool allocation in the network
	// +kubebuilder:validation:Optional
	StaticIPPool []IPScopeStaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type ExternalNetworkV2Observation struct {

	// Dedicate this External Network to an Org ID (only with IP Spaces, VCD 10.4.1+)
	DedicatedOrgID *string `json:"dedicatedOrgId,omitempty" tf:"dedicated_org_id,omitempty"`

	// Network description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of IP scopes for the network
	IPScope []ExternalNetworkV2IPScopeObservation `json:"ipScope,omitempty" tf:"ip_scope,omitempty"`

	// Network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to NSX-T Tier-0 router or segment and manager
	NsxtNetwork []NsxtNetworkObservation `json:"nsxtNetwork,omitempty" tf:"nsxt_network,omitempty"`

	// Enables IP Spaces for this network (default 'false'). VCD 10.4.1+
	UseIPSpaces *bool `json:"useIpSpaces,omitempty" tf:"use_ip_spaces,omitempty"`

	// A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.
	VsphereNetwork []ExternalNetworkV2VsphereNetworkObservation `json:"vsphereNetwork,omitempty" tf:"vsphere_network,omitempty"`
}

type ExternalNetworkV2Parameters struct {

	// Dedicate this External Network to an Org ID (only with IP Spaces, VCD 10.4.1+)
	// +kubebuilder:validation:Optional
	DedicatedOrgID *string `json:"dedicatedOrgId,omitempty" tf:"dedicated_org_id,omitempty"`

	// Network description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A set of IP scopes for the network
	// +kubebuilder:validation:Optional
	IPScope []ExternalNetworkV2IPScopeParameters `json:"ipScope,omitempty" tf:"ip_scope,omitempty"`

	// Network name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to NSX-T Tier-0 router or segment and manager
	// +kubebuilder:validation:Optional
	NsxtNetwork []NsxtNetworkParameters `json:"nsxtNetwork,omitempty" tf:"nsxt_network,omitempty"`

	// Enables IP Spaces for this network (default 'false'). VCD 10.4.1+
	// +kubebuilder:validation:Optional
	UseIPSpaces *bool `json:"useIpSpaces,omitempty" tf:"use_ip_spaces,omitempty"`

	// A set of port groups that back this network. Each referenced DV_PORTGROUP or NETWORK must exist on a vCenter server registered with the system.
	// +kubebuilder:validation:Optional
	VsphereNetwork []ExternalNetworkV2VsphereNetworkParameters `json:"vsphereNetwork,omitempty" tf:"vsphere_network,omitempty"`
}

type ExternalNetworkV2VsphereNetworkObservation struct {

	// The name of the port group
	PortgroupID *string `json:"portgroupId,omitempty" tf:"portgroup_id,omitempty"`

	// The vCenter server name
	VcenterID *string `json:"vcenterId,omitempty" tf:"vcenter_id,omitempty"`
}

type ExternalNetworkV2VsphereNetworkParameters struct {

	// The name of the port group
	// +kubebuilder:validation:Required
	PortgroupID *string `json:"portgroupId" tf:"portgroup_id,omitempty"`

	// The vCenter server name
	// +kubebuilder:validation:Required
	VcenterID *string `json:"vcenterId" tf:"vcenter_id,omitempty"`
}

type IPScopeStaticIPPoolObservation struct {

	// End address of the IP range
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// Start address of the IP range
	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type IPScopeStaticIPPoolParameters struct {

	// End address of the IP range
	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// Start address of the IP range
	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type NsxtNetworkObservation struct {

	// ID of NSX-T manager
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// Name of NSX-T segment (for NSX-T segment backed external network)
	NsxtSegmentName *string `json:"nsxtSegmentName,omitempty" tf:"nsxt_segment_name,omitempty"`

	// ID of NSX-T Tier-0 router (for T0 gateway backed external network)
	NsxtTier0RouterID *string `json:"nsxtTier0RouterId,omitempty" tf:"nsxt_tier0_router_id,omitempty"`
}

type NsxtNetworkParameters struct {

	// ID of NSX-T manager
	// +kubebuilder:validation:Required
	NsxtManagerID *string `json:"nsxtManagerId" tf:"nsxt_manager_id,omitempty"`

	// Name of NSX-T segment (for NSX-T segment backed external network)
	// +kubebuilder:validation:Optional
	NsxtSegmentName *string `json:"nsxtSegmentName,omitempty" tf:"nsxt_segment_name,omitempty"`

	// ID of NSX-T Tier-0 router (for T0 gateway backed external network)
	// +kubebuilder:validation:Optional
	NsxtTier0RouterID *string `json:"nsxtTier0RouterId,omitempty" tf:"nsxt_tier0_router_id,omitempty"`
}

// ExternalNetworkV2Spec defines the desired state of ExternalNetworkV2
type ExternalNetworkV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExternalNetworkV2Parameters `json:"forProvider"`
}

// ExternalNetworkV2Status defines the observed state of ExternalNetworkV2.
type ExternalNetworkV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExternalNetworkV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalNetworkV2 is the Schema for the ExternalNetworkV2s API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ExternalNetworkV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   ExternalNetworkV2Spec   `json:"spec"`
	Status ExternalNetworkV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalNetworkV2List contains a list of ExternalNetworkV2s
type ExternalNetworkV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExternalNetworkV2 `json:"items"`
}

// Repository type metadata.
var (
	ExternalNetworkV2_Kind             = "ExternalNetworkV2"
	ExternalNetworkV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExternalNetworkV2_Kind}.String()
	ExternalNetworkV2_KindAPIVersion   = ExternalNetworkV2_Kind + "." + CRDGroupVersion.String()
	ExternalNetworkV2_GroupVersionKind = CRDGroupVersion.WithKind(ExternalNetworkV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ExternalNetworkV2{}, &ExternalNetworkV2List{})
}
