/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VAppFirewallRulesObservation struct {

	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// Enable or disable firewall service. Default is `true`
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Flag to enable logging for default action. Default value is false.
	LogDefaultAction *bool `json:"logDefaultAction,omitempty" tf:"log_default_action,omitempty"`

	// vApp network identifier
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	Rule []VAppFirewallRulesRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// vApp identifier
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppFirewallRulesParameters struct {

	// Specifies what to do should none of the rules match. Either `allow` or `drop`
	// +kubebuilder:validation:Optional
	DefaultAction *string `json:"defaultAction,omitempty" tf:"default_action,omitempty"`

	// Enable or disable firewall service. Default is `true`
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Flag to enable logging for default action. Default value is false.
	// +kubebuilder:validation:Optional
	LogDefaultAction *bool `json:"logDefaultAction,omitempty" tf:"log_default_action,omitempty"`

	// vApp network identifier
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// +kubebuilder:validation:Optional
	Rule []VAppFirewallRulesRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// vApp identifier
	// +kubebuilder:validation:Optional
	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppFirewallRulesRuleObservation struct {

	// Destination IP address to which the rule applies. A value of `Any` matches any IP address.
	DestinationIP *string `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// Destination port to which this rule applies.
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Destination VM identifier
	DestinationVMID *string `json:"destinationVmId,omitempty" tf:"destination_vm_id,omitempty"`

	// The value can be one of: `assigned` - assigned internal IP will be automatically chosen. `NAT`: NATed external IP will be automatically chosen.
	DestinationVMIPType *string `json:"destinationVmIpType,omitempty" tf:"destination_vm_ip_type,omitempty"`

	// Destination VM NIC ID to which this rule applies.
	DestinationVMNicID *float64 `json:"destinationVmNicId,omitempty" tf:"destination_vm_nic_id,omitempty"`

	// 'true' value will enable rule logging. Default is false
	EnableLogging *bool `json:"enableLogging,omitempty" tf:"enable_logging,omitempty"`

	// 'true' value will enable firewall rule
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// One of: `drop` (drop packets that match the rule), `allow` (allow packets that match the rule to pass through the firewall)
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Specify the protocols to which the rule should be applied. One of: `any`, `icmp`, `tcp`, `udp`, `tcp&udp`
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Source IP address to which the rule applies. A value of `Any` matches any IP address.
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Source port to which this rule applies.
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`

	// Source VM identifier
	SourceVMID *string `json:"sourceVmId,omitempty" tf:"source_vm_id,omitempty"`

	// The value can be one of: `assigned` - assigned internal IP will be automatically chosen. `NAT`: NATed external IP will be automatically chosen.
	SourceVMIPType *string `json:"sourceVmIpType,omitempty" tf:"source_vm_ip_type,omitempty"`

	// Source VM NIC ID to which this rule applies.
	SourceVMNicID *float64 `json:"sourceVmNicId,omitempty" tf:"source_vm_nic_id,omitempty"`
}

type VAppFirewallRulesRuleParameters struct {

	// Destination IP address to which the rule applies. A value of `Any` matches any IP address.
	// +kubebuilder:validation:Optional
	DestinationIP *string `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// Destination port to which this rule applies.
	// +kubebuilder:validation:Optional
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Destination VM identifier
	// +kubebuilder:validation:Optional
	DestinationVMID *string `json:"destinationVmId,omitempty" tf:"destination_vm_id,omitempty"`

	// The value can be one of: `assigned` - assigned internal IP will be automatically chosen. `NAT`: NATed external IP will be automatically chosen.
	// +kubebuilder:validation:Optional
	DestinationVMIPType *string `json:"destinationVmIpType,omitempty" tf:"destination_vm_ip_type,omitempty"`

	// Destination VM NIC ID to which this rule applies.
	// +kubebuilder:validation:Optional
	DestinationVMNicID *float64 `json:"destinationVmNicId,omitempty" tf:"destination_vm_nic_id,omitempty"`

	// 'true' value will enable rule logging. Default is false
	// +kubebuilder:validation:Optional
	EnableLogging *bool `json:"enableLogging,omitempty" tf:"enable_logging,omitempty"`

	// 'true' value will enable firewall rule
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// One of: `drop` (drop packets that match the rule), `allow` (allow packets that match the rule to pass through the firewall)
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// Specify the protocols to which the rule should be applied. One of: `any`, `icmp`, `tcp`, `udp`, `tcp&udp`
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Source IP address to which the rule applies. A value of `Any` matches any IP address.
	// +kubebuilder:validation:Optional
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Source port to which this rule applies.
	// +kubebuilder:validation:Optional
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`

	// Source VM identifier
	// +kubebuilder:validation:Optional
	SourceVMID *string `json:"sourceVmId,omitempty" tf:"source_vm_id,omitempty"`

	// The value can be one of: `assigned` - assigned internal IP will be automatically chosen. `NAT`: NATed external IP will be automatically chosen.
	// +kubebuilder:validation:Optional
	SourceVMIPType *string `json:"sourceVmIpType,omitempty" tf:"source_vm_ip_type,omitempty"`

	// Source VM NIC ID to which this rule applies.
	// +kubebuilder:validation:Optional
	SourceVMNicID *float64 `json:"sourceVmNicId,omitempty" tf:"source_vm_nic_id,omitempty"`
}

// VAppFirewallRulesSpec defines the desired state of VAppFirewallRules
type VAppFirewallRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VAppFirewallRulesParameters `json:"forProvider"`
}

// VAppFirewallRulesStatus defines the observed state of VAppFirewallRules.
type VAppFirewallRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VAppFirewallRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VAppFirewallRules is the Schema for the VAppFirewallRuless API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VAppFirewallRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.defaultAction)",message="defaultAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.networkId)",message="networkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vappId)",message="vappId is a required parameter"
	Spec   VAppFirewallRulesSpec   `json:"spec"`
	Status VAppFirewallRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VAppFirewallRulesList contains a list of VAppFirewallRuless
type VAppFirewallRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VAppFirewallRules `json:"items"`
}

// Repository type metadata.
var (
	VAppFirewallRules_Kind             = "VAppFirewallRules"
	VAppFirewallRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VAppFirewallRules_Kind}.String()
	VAppFirewallRules_KindAPIVersion   = VAppFirewallRules_Kind + "." + CRDGroupVersion.String()
	VAppFirewallRules_GroupVersionKind = CRDGroupVersion.WithKind(VAppFirewallRules_Kind)
)

func init() {
	SchemeBuilder.Register(&VAppFirewallRules{}, &VAppFirewallRulesList{})
}
