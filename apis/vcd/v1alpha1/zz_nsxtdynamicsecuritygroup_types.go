/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CriteriaObservation struct {

	// Up to 4 rules can be used to define single criteria (VCD 10.2, 10.3)
	Rule []CriteriaRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type CriteriaParameters struct {

	// Up to 4 rules can be used to define single criteria (VCD 10.2, 10.3)
	// +kubebuilder:validation:Optional
	Rule []CriteriaRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type CriteriaRuleObservation struct {

	// Operator can be one of 'EQUALS', 'CONTAINS', 'STARTS_WITH', 'ENDS_WITH'
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Type of object matching 'VM_TAG' or 'VM_NAME'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Filter value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CriteriaRuleParameters struct {

	// Operator can be one of 'EQUALS', 'CONTAINS', 'STARTS_WITH', 'ENDS_WITH'
	// +kubebuilder:validation:Required
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// Type of object matching 'VM_TAG' or 'VM_NAME'
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Filter value
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type MemberVmsObservation struct {
	VMID *string `json:"vmId,omitempty" tf:"vm_id,omitempty"`

	VMName *string `json:"vmName,omitempty" tf:"vm_name,omitempty"`

	VappID *string `json:"vappId,omitempty" tf:"vapp_id,omitempty"`

	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`
}

type MemberVmsParameters struct {
}

type NsxtDynamicSecurityGroupObservation struct {

	// Up to 3 criteria to be used to define the Dynamic Security Group (VCD 10.2, 10.3)
	Criteria []CriteriaObservation `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Dynamic Security Group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Set of VM IDs
	MemberVms []MemberVmsObservation `json:"memberVms,omitempty" tf:"member_vms,omitempty"`

	// Dynamic Security Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC Group ID in which Dynamic Security Group is located
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type NsxtDynamicSecurityGroupParameters struct {

	// Up to 3 criteria to be used to define the Dynamic Security Group (VCD 10.2, 10.3)
	// +kubebuilder:validation:Optional
	Criteria []CriteriaParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Dynamic Security Group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Dynamic Security Group name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// VDC Group ID in which Dynamic Security Group is located
	// +kubebuilder:validation:Optional
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

// NsxtDynamicSecurityGroupSpec defines the desired state of NsxtDynamicSecurityGroup
type NsxtDynamicSecurityGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtDynamicSecurityGroupParameters `json:"forProvider"`
}

// NsxtDynamicSecurityGroupStatus defines the observed state of NsxtDynamicSecurityGroup.
type NsxtDynamicSecurityGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtDynamicSecurityGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtDynamicSecurityGroup is the Schema for the NsxtDynamicSecurityGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtDynamicSecurityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vdcGroupId)",message="vdcGroupId is a required parameter"
	Spec   NsxtDynamicSecurityGroupSpec   `json:"spec"`
	Status NsxtDynamicSecurityGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtDynamicSecurityGroupList contains a list of NsxtDynamicSecurityGroups
type NsxtDynamicSecurityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtDynamicSecurityGroup `json:"items"`
}

// Repository type metadata.
var (
	NsxtDynamicSecurityGroup_Kind             = "NsxtDynamicSecurityGroup"
	NsxtDynamicSecurityGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtDynamicSecurityGroup_Kind}.String()
	NsxtDynamicSecurityGroup_KindAPIVersion   = NsxtDynamicSecurityGroup_Kind + "." + CRDGroupVersion.String()
	NsxtDynamicSecurityGroup_GroupVersionKind = CRDGroupVersion.WithKind(NsxtDynamicSecurityGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtDynamicSecurityGroup{}, &NsxtDynamicSecurityGroupList{})
}
