/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbAppRuleObservation struct {

	// Edge gateway name in which the LB Application Rule is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique LB Application Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbAppRuleParameters struct {

	// Edge gateway name in which the LB Application Rule is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Unique LB Application Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The script for the application rule. Note - you may find HEREDOC useful to pass multiline strings
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// LbAppRuleSpec defines the desired state of LbAppRule
type LbAppRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbAppRuleParameters `json:"forProvider"`
}

// LbAppRuleStatus defines the observed state of LbAppRule.
type LbAppRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbAppRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbAppRule is the Schema for the LbAppRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbAppRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGateway)",message="edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.script)",message="script is a required parameter"
	Spec   LbAppRuleSpec   `json:"spec"`
	Status LbAppRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbAppRuleList contains a list of LbAppRules
type LbAppRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbAppRule `json:"items"`
}

// Repository type metadata.
var (
	LbAppRule_Kind             = "LbAppRule"
	LbAppRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbAppRule_Kind}.String()
	LbAppRule_KindAPIVersion   = LbAppRule_Kind + "." + CRDGroupVersion.String()
	LbAppRule_GroupVersionKind = CRDGroupVersion.WithKind(LbAppRule_Kind)
)

func init() {
	SchemeBuilder.Register(&LbAppRule{}, &LbAppRuleList{})
}
