/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbServerPoolObservation struct {

	// Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Additional options for load balancing algorithm for httpheader or url algorithms
	AlgorithmParameters *string `json:"algorithmParameters,omitempty" tf:"algorithm_parameters,omitempty"`

	// Server pool description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge gateway name in which the LB Server Pool is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Makes client IP addresses visible to the backend servers
	EnableTransparency *bool `json:"enableTransparency,omitempty" tf:"enable_transparency,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Member []MemberObservation `json:"member,omitempty" tf:"member,omitempty"`

	// Load Balancer Service Monitor ID
	MonitorID *string `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// Unique LB Server Pool name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LbServerPoolParameters struct {

	// Balancing method for the service. One of 'ip-hash', 'round-robin', 'uri', 'leastconn', 'url', or 'httpheader'
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Additional options for load balancing algorithm for httpheader or url algorithms
	// +kubebuilder:validation:Optional
	AlgorithmParameters *string `json:"algorithmParameters,omitempty" tf:"algorithm_parameters,omitempty"`

	// Server pool description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge gateway name in which the LB Server Pool is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Makes client IP addresses visible to the backend servers
	// +kubebuilder:validation:Optional
	EnableTransparency *bool `json:"enableTransparency,omitempty" tf:"enable_transparency,omitempty"`

	// +kubebuilder:validation:Optional
	Member []MemberParameters `json:"member,omitempty" tf:"member,omitempty"`

	// Load Balancer Service Monitor ID
	// +kubebuilder:validation:Optional
	MonitorID *string `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// Unique LB Server Pool name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type MemberObservation struct {

	// Defines member state. One of enabled, drain, disabled.
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// Pool member id (formatted as member-xx, where xx is a number)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address of member in server pool
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The maximum number of concurrent connections the member can handle. If exceeded requests are queued and the load balancer waits for a connection to be released
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// Minimum number of concurrent connections a member must always accept
	MinConnections *float64 `json:"minConnections,omitempty" tf:"min_connections,omitempty"`

	// Port at which the member is to receive health monitor requests. Can be the same as port
	MonitorPort *float64 `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Name of pool member
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port at which the member is to receive traffic from the load balancer
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Proportion of traffic this member is to handle. Must be an integer in the range 1-256
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type MemberParameters struct {

	// Defines member state. One of enabled, drain, disabled.
	// +kubebuilder:validation:Required
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// IP address of member in server pool
	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// The maximum number of concurrent connections the member can handle. If exceeded requests are queued and the load balancer waits for a connection to be released
	// +kubebuilder:validation:Optional
	MaxConnections *float64 `json:"maxConnections,omitempty" tf:"max_connections,omitempty"`

	// Minimum number of concurrent connections a member must always accept
	// +kubebuilder:validation:Optional
	MinConnections *float64 `json:"minConnections,omitempty" tf:"min_connections,omitempty"`

	// Port at which the member is to receive health monitor requests. Can be the same as port
	// +kubebuilder:validation:Required
	MonitorPort *float64 `json:"monitorPort" tf:"monitor_port,omitempty"`

	// Name of pool member
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Port at which the member is to receive traffic from the load balancer
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Proportion of traffic this member is to handle. Must be an integer in the range 1-256
	// +kubebuilder:validation:Required
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// LbServerPoolSpec defines the desired state of LbServerPool
type LbServerPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbServerPoolParameters `json:"forProvider"`
}

// LbServerPoolStatus defines the observed state of LbServerPool.
type LbServerPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbServerPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbServerPool is the Schema for the LbServerPools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type LbServerPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.algorithm)",message="algorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGateway)",message="edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   LbServerPoolSpec   `json:"spec"`
	Status LbServerPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbServerPoolList contains a list of LbServerPools
type LbServerPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbServerPool `json:"items"`
}

// Repository type metadata.
var (
	LbServerPool_Kind             = "LbServerPool"
	LbServerPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbServerPool_Kind}.String()
	LbServerPool_KindAPIVersion   = LbServerPool_Kind + "." + CRDGroupVersion.String()
	LbServerPool_GroupVersionKind = CRDGroupVersion.WithKind(LbServerPool_Kind)
)

func init() {
	SchemeBuilder.Register(&LbServerPool{}, &LbServerPoolList{})
}
