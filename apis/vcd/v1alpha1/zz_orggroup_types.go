/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgGroupObservation struct {

	// Description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Identity provider type for this this group. One of: 'INTEGRATED', 'SAML', 'OAUTH'.
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// Existing role name to assign
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Read only. Set of user names that belong to the group
	UserNames []*string `json:"userNames,omitempty" tf:"user_names,omitempty"`
}

type OrgGroupParameters struct {

	// Description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Group name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Identity provider type for this this group. One of: 'INTEGRATED', 'SAML', 'OAUTH'.
	// +kubebuilder:validation:Optional
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// Existing role name to assign
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

// OrgGroupSpec defines the desired state of OrgGroup
type OrgGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgGroupParameters `json:"forProvider"`
}

// OrgGroupStatus defines the observed state of OrgGroup.
type OrgGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrgGroup is the Schema for the OrgGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.providerType)",message="providerType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.role)",message="role is a required parameter"
	Spec   OrgGroupSpec   `json:"spec"`
	Status OrgGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgGroupList contains a list of OrgGroups
type OrgGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgGroup `json:"items"`
}

// Repository type metadata.
var (
	OrgGroup_Kind             = "OrgGroup"
	OrgGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgGroup_Kind}.String()
	OrgGroup_KindAPIVersion   = OrgGroup_Kind + "." + CRDGroupVersion.String()
	OrgGroup_GroupVersionKind = CRDGroupVersion.WithKind(OrgGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgGroup{}, &OrgGroupList{})
}
