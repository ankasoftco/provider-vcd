/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgegatewayVPNObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	EncryptionProtocol *string `json:"encryptionProtocol,omitempty" tf:"encryption_protocol,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`

	LocalIPAddress *string `json:"localIpAddress,omitempty" tf:"local_ip_address,omitempty"`

	LocalSubnets []LocalSubnetsObservation `json:"localSubnets,omitempty" tf:"local_subnets,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	PeerIPAddress *string `json:"peerIpAddress,omitempty" tf:"peer_ip_address,omitempty"`

	PeerSubnets []PeerSubnetsObservation `json:"peerSubnets,omitempty" tf:"peer_subnets,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type EdgegatewayVPNParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionProtocol *string `json:"encryptionProtocol,omitempty" tf:"encryption_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	LocalID *string `json:"localId,omitempty" tf:"local_id,omitempty"`

	// +kubebuilder:validation:Optional
	LocalIPAddress *string `json:"localIpAddress,omitempty" tf:"local_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	LocalSubnets []LocalSubnetsParameters `json:"localSubnets,omitempty" tf:"local_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// +kubebuilder:validation:Optional
	PeerID *string `json:"peerId,omitempty" tf:"peer_id,omitempty"`

	// +kubebuilder:validation:Optional
	PeerIPAddress *string `json:"peerIpAddress,omitempty" tf:"peer_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	PeerSubnets []PeerSubnetsParameters `json:"peerSubnets,omitempty" tf:"peer_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	SharedSecretSecretRef v1.SecretKeySelector `json:"sharedSecretSecretRef" tf:"-"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type LocalSubnetsObservation struct {
	LocalSubnetGateway *string `json:"localSubnetGateway,omitempty" tf:"local_subnet_gateway,omitempty"`

	LocalSubnetMask *string `json:"localSubnetMask,omitempty" tf:"local_subnet_mask,omitempty"`

	LocalSubnetName *string `json:"localSubnetName,omitempty" tf:"local_subnet_name,omitempty"`
}

type LocalSubnetsParameters struct {

	// +kubebuilder:validation:Required
	LocalSubnetGateway *string `json:"localSubnetGateway" tf:"local_subnet_gateway,omitempty"`

	// +kubebuilder:validation:Required
	LocalSubnetMask *string `json:"localSubnetMask" tf:"local_subnet_mask,omitempty"`

	// +kubebuilder:validation:Required
	LocalSubnetName *string `json:"localSubnetName" tf:"local_subnet_name,omitempty"`
}

type PeerSubnetsObservation struct {
	PeerSubnetGateway *string `json:"peerSubnetGateway,omitempty" tf:"peer_subnet_gateway,omitempty"`

	PeerSubnetMask *string `json:"peerSubnetMask,omitempty" tf:"peer_subnet_mask,omitempty"`

	PeerSubnetName *string `json:"peerSubnetName,omitempty" tf:"peer_subnet_name,omitempty"`
}

type PeerSubnetsParameters struct {

	// +kubebuilder:validation:Required
	PeerSubnetGateway *string `json:"peerSubnetGateway" tf:"peer_subnet_gateway,omitempty"`

	// +kubebuilder:validation:Required
	PeerSubnetMask *string `json:"peerSubnetMask" tf:"peer_subnet_mask,omitempty"`

	// +kubebuilder:validation:Required
	PeerSubnetName *string `json:"peerSubnetName" tf:"peer_subnet_name,omitempty"`
}

// EdgegatewayVPNSpec defines the desired state of EdgegatewayVPN
type EdgegatewayVPNSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgegatewayVPNParameters `json:"forProvider"`
}

// EdgegatewayVPNStatus defines the observed state of EdgegatewayVPN.
type EdgegatewayVPNStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgegatewayVPNObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgegatewayVPN is the Schema for the EdgegatewayVPNs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type EdgegatewayVPN struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGateway)",message="edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.encryptionProtocol)",message="encryptionProtocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.localId)",message="localId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.localIpAddress)",message="localIpAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.mtu)",message="mtu is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.peerId)",message="peerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.peerIpAddress)",message="peerIpAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.sharedSecretSecretRef)",message="sharedSecretSecretRef is a required parameter"
	Spec   EdgegatewayVPNSpec   `json:"spec"`
	Status EdgegatewayVPNStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgegatewayVPNList contains a list of EdgegatewayVPNs
type EdgegatewayVPNList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgegatewayVPN `json:"items"`
}

// Repository type metadata.
var (
	EdgegatewayVPN_Kind             = "EdgegatewayVPN"
	EdgegatewayVPN_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgegatewayVPN_Kind}.String()
	EdgegatewayVPN_KindAPIVersion   = EdgegatewayVPN_Kind + "." + CRDGroupVersion.String()
	EdgegatewayVPN_GroupVersionKind = CRDGroupVersion.WithKind(EdgegatewayVPN_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgegatewayVPN{}, &EdgegatewayVPNList{})
}
