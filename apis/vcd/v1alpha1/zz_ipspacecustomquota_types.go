/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPPrefixQuotaObservation struct {

	// Prefix length
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// IP Prefix Quota
	Quota *string `json:"quota,omitempty" tf:"quota,omitempty"`
}

type IPPrefixQuotaParameters struct {

	// Prefix length
	// +kubebuilder:validation:Required
	PrefixLength *string `json:"prefixLength" tf:"prefix_length,omitempty"`

	// IP Prefix Quota
	// +kubebuilder:validation:Required
	Quota *string `json:"quota" tf:"quota,omitempty"`
}

type IpSpaceCustomQuotaObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// One or more IP prefixes within internal scope
	IPPrefixQuota []IPPrefixQuotaObservation `json:"ipPrefixQuota,omitempty" tf:"ip_prefix_quota,omitempty"`

	// IP range quota. '-1' - unlimited, '0' - no quota
	IPRangeQuota *string `json:"ipRangeQuota,omitempty" tf:"ip_range_quota,omitempty"`

	// ID of IP Space
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Organization ID for setting custom quota
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`
}

type IpSpaceCustomQuotaParameters struct {

	// One or more IP prefixes within internal scope
	// +kubebuilder:validation:Optional
	IPPrefixQuota []IPPrefixQuotaParameters `json:"ipPrefixQuota,omitempty" tf:"ip_prefix_quota,omitempty"`

	// IP range quota. '-1' - unlimited, '0' - no quota
	// +kubebuilder:validation:Optional
	IPRangeQuota *string `json:"ipRangeQuota,omitempty" tf:"ip_range_quota,omitempty"`

	// ID of IP Space
	// +kubebuilder:validation:Optional
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Organization ID for setting custom quota
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`
}

// IpSpaceCustomQuotaSpec defines the desired state of IpSpaceCustomQuota
type IpSpaceCustomQuotaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpSpaceCustomQuotaParameters `json:"forProvider"`
}

// IpSpaceCustomQuotaStatus defines the observed state of IpSpaceCustomQuota.
type IpSpaceCustomQuotaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpSpaceCustomQuotaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpSpaceCustomQuota is the Schema for the IpSpaceCustomQuotas API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type IpSpaceCustomQuota struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipSpaceId)",message="ipSpaceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.orgId)",message="orgId is a required parameter"
	Spec   IpSpaceCustomQuotaSpec   `json:"spec"`
	Status IpSpaceCustomQuotaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpSpaceCustomQuotaList contains a list of IpSpaceCustomQuotas
type IpSpaceCustomQuotaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpSpaceCustomQuota `json:"items"`
}

// Repository type metadata.
var (
	IpSpaceCustomQuota_Kind             = "IpSpaceCustomQuota"
	IpSpaceCustomQuota_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpSpaceCustomQuota_Kind}.String()
	IpSpaceCustomQuota_KindAPIVersion   = IpSpaceCustomQuota_Kind + "." + CRDGroupVersion.String()
	IpSpaceCustomQuota_GroupVersionKind = CRDGroupVersion.WithKind(IpSpaceCustomQuota_Kind)
)

func init() {
	SchemeBuilder.Register(&IpSpaceCustomQuota{}, &IpSpaceCustomQuotaList{})
}
