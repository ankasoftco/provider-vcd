/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GlobalRoleObservation struct {

	// Key used for internationalization
	BundleKey *string `json:"bundleKey,omitempty" tf:"bundle_key,omitempty"`

	// Global role description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of global role.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// When true, publishes the global role to all tenants
	PublishToAllTenants *bool `json:"publishToAllTenants,omitempty" tf:"publish_to_all_tenants,omitempty"`

	// Whether this global role is read-only
	ReadOnly *bool `json:"readOnly,omitempty" tf:"read_only,omitempty"`

	// list of rights assigned to this global role
	Rights []*string `json:"rights,omitempty" tf:"rights,omitempty"`

	// list of tenants to which this global role is published
	Tenants []*string `json:"tenants,omitempty" tf:"tenants,omitempty"`
}

type GlobalRoleParameters struct {

	// Global role description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of global role.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// When true, publishes the global role to all tenants
	// +kubebuilder:validation:Optional
	PublishToAllTenants *bool `json:"publishToAllTenants,omitempty" tf:"publish_to_all_tenants,omitempty"`

	// list of rights assigned to this global role
	// +kubebuilder:validation:Optional
	Rights []*string `json:"rights,omitempty" tf:"rights,omitempty"`

	// list of tenants to which this global role is published
	// +kubebuilder:validation:Optional
	Tenants []*string `json:"tenants,omitempty" tf:"tenants,omitempty"`
}

// GlobalRoleSpec defines the desired state of GlobalRole
type GlobalRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalRoleParameters `json:"forProvider"`
}

// GlobalRoleStatus defines the observed state of GlobalRole.
type GlobalRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalRole is the Schema for the GlobalRoles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type GlobalRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.description)",message="description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.publishToAllTenants)",message="publishToAllTenants is a required parameter"
	Spec   GlobalRoleSpec   `json:"spec"`
	Status GlobalRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalRoleList contains a list of GlobalRoles
type GlobalRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalRole `json:"items"`
}

// Repository type metadata.
var (
	GlobalRole_Kind             = "GlobalRole"
	GlobalRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalRole_Kind}.String()
	GlobalRole_KindAPIVersion   = GlobalRole_Kind + "." + CRDGroupVersion.String()
	GlobalRole_GroupVersionKind = CRDGroupVersion.WithKind(GlobalRole_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalRole{}, &GlobalRoleList{})
}
