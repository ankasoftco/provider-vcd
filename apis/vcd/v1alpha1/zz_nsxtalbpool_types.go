/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HealthMonitorObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SystemDefined *bool `json:"systemDefined,omitempty" tf:"system_defined,omitempty"`

	// Type of health monitor. One of `HTTP`, `HTTPS`, `TCP`, `UDP`, `PING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type HealthMonitorParameters struct {

	// Type of health monitor. One of `HTTP`, `HTTPS`, `TCP`, `UDP`, `PING`
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type NsxtAlbPoolMemberObservation struct {

	// Detailed health message
	DetailedHealthMessage *string `json:"detailedHealthMessage,omitempty" tf:"detailed_health_message,omitempty"`

	// Defines if pool member is accepts traffic (default 'true')
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Health status
	HealthStatus *string `json:"healthStatus,omitempty" tf:"health_status,omitempty"`

	// IP address of pool member
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Marked down by provides a set of health monitors that marked the service down
	MarkedDownBy []*string `json:"markedDownBy,omitempty" tf:"marked_down_by,omitempty"`

	// Member port
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Ratio of selecting eligible servers in the pool
	Ratio *float64 `json:"ratio,omitempty" tf:"ratio,omitempty"`
}

type NsxtAlbPoolMemberParameters struct {

	// Defines if pool member is accepts traffic (default 'true')
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IP address of pool member
	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// Member port
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Ratio of selecting eligible servers in the pool
	// +kubebuilder:validation:Optional
	Ratio *float64 `json:"ratio,omitempty" tf:"ratio,omitempty"`
}

type NsxtAlbPoolObservation struct {

	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`, `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// IDs of associated virtual services
	AssociatedVirtualServiceIds []*string `json:"associatedVirtualServiceIds,omitempty" tf:"associated_virtual_service_ids,omitempty"`

	// Names of associated virtual services
	AssociatedVirtualServices []*string `json:"associatedVirtualServices,omitempty" tf:"associated_virtual_services,omitempty"`

	// A set of root certificate IDs to use when validating certificates presented by pool members
	CACertificateIds []*string `json:"caCertificateIds,omitempty" tf:"ca_certificate_ids,omitempty"`

	// Boolean flag if common name check of the certificate should be enabled
	CnCheckEnabled *bool `json:"cnCheckEnabled,omitempty" tf:"cn_check_enabled,omitempty"`

	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	DefaultPort *float64 `json:"defaultPort,omitempty" tf:"default_port,omitempty"`

	// Description of ALB Pool
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of domain names which will be used to verify common names
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Edge gateway ID in which ALB Pool should be created
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Boolean value if ALB Pool is enabled or not (default true)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Number of enabled members in the pool
	EnabledMemberCount *float64 `json:"enabledMemberCount,omitempty" tf:"enabled_member_count,omitempty"`

	// Maximum time in minutes to gracefully disable pool member (default 1)
	GracefulTimeoutPeriod *float64 `json:"gracefulTimeoutPeriod,omitempty" tf:"graceful_timeout_period,omitempty"`

	// Health message
	HealthMessage *string `json:"healthMessage,omitempty" tf:"health_message,omitempty"`

	HealthMonitor []HealthMonitorObservation `json:"healthMonitor,omitempty" tf:"health_monitor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ALB Pool Members
	Member []NsxtAlbPoolMemberObservation `json:"member,omitempty" tf:"member,omitempty"`

	// Number of members in the pool
	MemberCount *float64 `json:"memberCount,omitempty" tf:"member_count,omitempty"`

	// ID of Firewall Group to use for Pool Membership (VCD 10.4.1+)
	MemberGroupID *string `json:"memberGroupId,omitempty" tf:"member_group_id,omitempty"`

	// Name of ALB Pool
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Monitors if the traffic is accepted by node (default true)
	PassiveMonitoringEnabled *bool `json:"passiveMonitoringEnabled,omitempty" tf:"passive_monitoring_enabled,omitempty"`

	PersistenceProfile []PersistenceProfileObservation `json:"persistenceProfile,omitempty" tf:"persistence_profile,omitempty"`

	// Number of members in the pool serving the traffic
	UpMemberCount *float64 `json:"upMemberCount,omitempty" tf:"up_member_count,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtAlbPoolParameters struct {

	// Algorithm for choosing pool members (default LEAST_CONNECTIONS). Other `ROUND_ROBIN`,`CONSISTENT_HASH`, `FASTEST_RESPONSE`, `LEAST_LOAD`, `FEWEST_SERVERS`, `RANDOM`, `FEWEST_TASKS`,`CORE_AFFINITY`
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// A set of root certificate IDs to use when validating certificates presented by pool members
	// +kubebuilder:validation:Optional
	CACertificateIds []*string `json:"caCertificateIds,omitempty" tf:"ca_certificate_ids,omitempty"`

	// Boolean flag if common name check of the certificate should be enabled
	// +kubebuilder:validation:Optional
	CnCheckEnabled *bool `json:"cnCheckEnabled,omitempty" tf:"cn_check_enabled,omitempty"`

	// Default Port defines destination server port used by the traffic sent to the member (default 80)
	// +kubebuilder:validation:Optional
	DefaultPort *float64 `json:"defaultPort,omitempty" tf:"default_port,omitempty"`

	// Description of ALB Pool
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of domain names which will be used to verify common names
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Edge gateway ID in which ALB Pool should be created
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Boolean value if ALB Pool is enabled or not (default true)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Maximum time in minutes to gracefully disable pool member (default 1)
	// +kubebuilder:validation:Optional
	GracefulTimeoutPeriod *float64 `json:"gracefulTimeoutPeriod,omitempty" tf:"graceful_timeout_period,omitempty"`

	// +kubebuilder:validation:Optional
	HealthMonitor []HealthMonitorParameters `json:"healthMonitor,omitempty" tf:"health_monitor,omitempty"`

	// ALB Pool Members
	// +kubebuilder:validation:Optional
	Member []NsxtAlbPoolMemberParameters `json:"member,omitempty" tf:"member,omitempty"`

	// ID of Firewall Group to use for Pool Membership (VCD 10.4.1+)
	// +kubebuilder:validation:Optional
	MemberGroupID *string `json:"memberGroupId,omitempty" tf:"member_group_id,omitempty"`

	// Name of ALB Pool
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Monitors if the traffic is accepted by node (default true)
	// +kubebuilder:validation:Optional
	PassiveMonitoringEnabled *bool `json:"passiveMonitoringEnabled,omitempty" tf:"passive_monitoring_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	PersistenceProfile []PersistenceProfileParameters `json:"persistenceProfile,omitempty" tf:"persistence_profile,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type PersistenceProfileObservation struct {

	// System generated name of persistence profile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of persistence strategy. One of `CLIENT_IP`, `HTTP_COOKIE`, `CUSTOM_HTTP_HEADER`, `APP_COOKIE`, `TLS`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Value of attribute based on persistence type
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PersistenceProfileParameters struct {

	// Type of persistence strategy. One of `CLIENT_IP`, `HTTP_COOKIE`, `CUSTOM_HTTP_HEADER`, `APP_COOKIE`, `TLS`
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Value of attribute based on persistence type
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// NsxtAlbPoolSpec defines the desired state of NsxtAlbPool
type NsxtAlbPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbPoolParameters `json:"forProvider"`
}

// NsxtAlbPoolStatus defines the observed state of NsxtAlbPool.
type NsxtAlbPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbPool is the Schema for the NsxtAlbPools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGatewayId)",message="edgeGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   NsxtAlbPoolSpec   `json:"spec"`
	Status NsxtAlbPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbPoolList contains a list of NsxtAlbPools
type NsxtAlbPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbPool `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbPool_Kind             = "NsxtAlbPool"
	NsxtAlbPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbPool_Kind}.String()
	NsxtAlbPool_KindAPIVersion   = NsxtAlbPool_Kind + "." + CRDGroupVersion.String()
	NsxtAlbPool_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbPool_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbPool{}, &NsxtAlbPoolList{})
}
