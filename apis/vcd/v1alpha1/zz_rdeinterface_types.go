/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RdeInterfaceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the Runtime Defined Entity Interface
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A unique namespace associated with the Runtime Defined Entity Interface. Combination of `vendor`, `nss` and `version` must be unique
	Nss *string `json:"nss,omitempty" tf:"nss,omitempty"`

	// True if the Runtime Defined Entity Interface cannot be modified
	Readonly *bool `json:"readonly,omitempty" tf:"readonly,omitempty"`

	// The vendor name. Combination of `vendor`, `nss` and `version` must be unique
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// The Runtime Defined Entity Interface's version. The version must follow semantic versioning rules. Combination of `vendor`, `nss` and `version` must be unique
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RdeInterfaceParameters struct {

	// The name of the Runtime Defined Entity Interface
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A unique namespace associated with the Runtime Defined Entity Interface. Combination of `vendor`, `nss` and `version` must be unique
	// +kubebuilder:validation:Optional
	Nss *string `json:"nss,omitempty" tf:"nss,omitempty"`

	// The vendor name. Combination of `vendor`, `nss` and `version` must be unique
	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// The Runtime Defined Entity Interface's version. The version must follow semantic versioning rules. Combination of `vendor`, `nss` and `version` must be unique
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// RdeInterfaceSpec defines the desired state of RdeInterface
type RdeInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RdeInterfaceParameters `json:"forProvider"`
}

// RdeInterfaceStatus defines the observed state of RdeInterface.
type RdeInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RdeInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RdeInterface is the Schema for the RdeInterfaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type RdeInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nss)",message="nss is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vendor)",message="vendor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.version)",message="version is a required parameter"
	Spec   RdeInterfaceSpec   `json:"spec"`
	Status RdeInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RdeInterfaceList contains a list of RdeInterfaces
type RdeInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RdeInterface `json:"items"`
}

// Repository type metadata.
var (
	RdeInterface_Kind             = "RdeInterface"
	RdeInterface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RdeInterface_Kind}.String()
	RdeInterface_KindAPIVersion   = RdeInterface_Kind + "." + CRDGroupVersion.String()
	RdeInterface_GroupVersionKind = CRDGroupVersion.WithKind(RdeInterface_Kind)
)

func init() {
	SchemeBuilder.Register(&RdeInterface{}, &RdeInterfaceList{})
}
