/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgMetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OrgMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OrgObservation struct {

	// True if this organization is allowed to share catalogs.
	CanPublishCatalogs *bool `json:"canPublishCatalogs,omitempty" tf:"can_publish_catalogs,omitempty"`

	// True if this organization is allowed to publish external catalogs.
	CanPublishExternalCatalogs *bool `json:"canPublishExternalCatalogs,omitempty" tf:"can_publish_external_catalogs,omitempty"`

	// True if this organization is allowed to subscribe to external catalogs.
	CanSubscribeExternalCatalogs *bool `json:"canSubscribeExternalCatalogs,omitempty" tf:"can_subscribe_external_catalogs,omitempty"`

	// Specifies this organization's default for virtual machine boot delay after power on.
	DelayAfterPowerOnSeconds *float64 `json:"delayAfterPowerOnSeconds,omitempty" tf:"delay_after_power_on_seconds,omitempty"`

	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains, regardless of their state.
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that normally allows removal.
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	DeployedVMQuota *float64 `json:"deployedVmQuota,omitempty" tf:"deployed_vm_quota,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// True if this organization is enabled (allows login and all other operations).
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Key value map of metadata to assign to this organization. Key and value can be any string.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given Organization
	MetadataEntry []OrgMetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. (0 = unlimited)
	StoredVMQuota *float64 `json:"storedVmQuota,omitempty" tf:"stored_vm_quota,omitempty"`

	// Defines lease parameters for vApps created in this organization
	VappLease []VappLeaseObservation `json:"vappLease,omitempty" tf:"vapp_lease,omitempty"`

	// Defines lease parameters for vApp templates created in this organization
	VappTemplateLease []VappTemplateLeaseObservation `json:"vappTemplateLease,omitempty" tf:"vapp_template_lease,omitempty"`
}

type OrgParameters struct {

	// True if this organization is allowed to share catalogs.
	// +kubebuilder:validation:Optional
	CanPublishCatalogs *bool `json:"canPublishCatalogs,omitempty" tf:"can_publish_catalogs,omitempty"`

	// True if this organization is allowed to publish external catalogs.
	// +kubebuilder:validation:Optional
	CanPublishExternalCatalogs *bool `json:"canPublishExternalCatalogs,omitempty" tf:"can_publish_external_catalogs,omitempty"`

	// True if this organization is allowed to subscribe to external catalogs.
	// +kubebuilder:validation:Optional
	CanSubscribeExternalCatalogs *bool `json:"canSubscribeExternalCatalogs,omitempty" tf:"can_subscribe_external_catalogs,omitempty"`

	// Specifies this organization's default for virtual machine boot delay after power on.
	// +kubebuilder:validation:Optional
	DelayAfterPowerOnSeconds *float64 `json:"delayAfterPowerOnSeconds,omitempty" tf:"delay_after_power_on_seconds,omitempty"`

	// When destroying use delete_force=True with delete_recursive=True to remove an org and any objects it contains, regardless of their state.
	// +kubebuilder:validation:Optional
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=True to remove the org and any objects it contains that are in a state that normally allows removal.
	// +kubebuilder:validation:Optional
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	// Maximum number of virtual machines that can be deployed simultaneously by a member of this organization. (0 = unlimited)
	// +kubebuilder:validation:Optional
	DeployedVMQuota *float64 `json:"deployedVmQuota,omitempty" tf:"deployed_vm_quota,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// True if this organization is enabled (allows login and all other operations).
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Key value map of metadata to assign to this organization. Key and value can be any string.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given Organization
	// +kubebuilder:validation:Optional
	MetadataEntry []OrgMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Maximum number of virtual machines in vApps or vApp templates that can be stored in an undeployed state by a member of this organization. (0 = unlimited)
	// +kubebuilder:validation:Optional
	StoredVMQuota *float64 `json:"storedVmQuota,omitempty" tf:"stored_vm_quota,omitempty"`

	// Defines lease parameters for vApps created in this organization
	// +kubebuilder:validation:Optional
	VappLease []VappLeaseParameters `json:"vappLease,omitempty" tf:"vapp_lease,omitempty"`

	// Defines lease parameters for vApp templates created in this organization
	// +kubebuilder:validation:Optional
	VappTemplateLease []VappTemplateLeaseParameters `json:"vappTemplateLease,omitempty" tf:"vapp_template_lease,omitempty"`
}

type VappLeaseObservation struct {

	// If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
	DeleteOnStorageLeaseExpiration *bool `json:"deleteOnStorageLeaseExpiration,omitempty" tf:"delete_on_storage_lease_expiration,omitempty"`

	// How long vApps can run before they are automatically stopped (in seconds). 0 means never expires
	MaximumRuntimeLeaseInSec *float64 `json:"maximumRuntimeLeaseInSec,omitempty" tf:"maximum_runtime_lease_in_sec,omitempty"`

	// How long stopped vApps are available before being automatically cleaned up (in seconds). 0 means never expires
	MaximumStorageLeaseInSec *float64 `json:"maximumStorageLeaseInSec,omitempty" tf:"maximum_storage_lease_in_sec,omitempty"`

	// When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires
	PowerOffOnRuntimeLeaseExpiration *bool `json:"powerOffOnRuntimeLeaseExpiration,omitempty" tf:"power_off_on_runtime_lease_expiration,omitempty"`
}

type VappLeaseParameters struct {

	// If true, storage for a vApp is deleted when the vApp's lease expires. If false, the storage is flagged for deletion, but not deleted.
	// +kubebuilder:validation:Required
	DeleteOnStorageLeaseExpiration *bool `json:"deleteOnStorageLeaseExpiration" tf:"delete_on_storage_lease_expiration,omitempty"`

	// How long vApps can run before they are automatically stopped (in seconds). 0 means never expires
	// +kubebuilder:validation:Required
	MaximumRuntimeLeaseInSec *float64 `json:"maximumRuntimeLeaseInSec" tf:"maximum_runtime_lease_in_sec,omitempty"`

	// How long stopped vApps are available before being automatically cleaned up (in seconds). 0 means never expires
	// +kubebuilder:validation:Required
	MaximumStorageLeaseInSec *float64 `json:"maximumStorageLeaseInSec" tf:"maximum_storage_lease_in_sec,omitempty"`

	// When true, vApps are powered off when the runtime lease expires. When false, vApps are suspended when the runtime lease expires
	// +kubebuilder:validation:Required
	PowerOffOnRuntimeLeaseExpiration *bool `json:"powerOffOnRuntimeLeaseExpiration" tf:"power_off_on_runtime_lease_expiration,omitempty"`
}

type VappTemplateLeaseObservation struct {

	// If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted
	DeleteOnStorageLeaseExpiration *bool `json:"deleteOnStorageLeaseExpiration,omitempty" tf:"delete_on_storage_lease_expiration,omitempty"`

	// How long vApp templates are available before being automatically cleaned up (in seconds). 0 means never expires
	MaximumStorageLeaseInSec *float64 `json:"maximumStorageLeaseInSec,omitempty" tf:"maximum_storage_lease_in_sec,omitempty"`
}

type VappTemplateLeaseParameters struct {

	// If true, storage for a vAppTemplate is deleted when the vAppTemplate lease expires. If false, the storage is flagged for deletion, but not deleted
	// +kubebuilder:validation:Required
	DeleteOnStorageLeaseExpiration *bool `json:"deleteOnStorageLeaseExpiration" tf:"delete_on_storage_lease_expiration,omitempty"`

	// How long vApp templates are available before being automatically cleaned up (in seconds). 0 means never expires
	// +kubebuilder:validation:Required
	MaximumStorageLeaseInSec *float64 `json:"maximumStorageLeaseInSec" tf:"maximum_storage_lease_in_sec,omitempty"`
}

// OrgSpec defines the desired state of Org
type OrgSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgParameters `json:"forProvider"`
}

// OrgStatus defines the observed state of Org.
type OrgStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Org is the Schema for the Orgs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Org struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deleteForce)",message="deleteForce is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deleteRecursive)",message="deleteRecursive is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.fullName)",message="fullName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   OrgSpec   `json:"spec"`
	Status OrgStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgList contains a list of Orgs
type OrgList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Org `json:"items"`
}

// Repository type metadata.
var (
	Org_Kind             = "Org"
	Org_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Org_Kind}.String()
	Org_KindAPIVersion   = Org_Kind + "." + CRDGroupVersion.String()
	Org_GroupVersionKind = CRDGroupVersion.WithKind(Org_Kind)
)

func init() {
	SchemeBuilder.Register(&Org{}, &OrgList{})
}
