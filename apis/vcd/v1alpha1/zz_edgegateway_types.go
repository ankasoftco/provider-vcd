/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgegatewayObservation struct {

	// Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
	Configuration *string `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// IP address of edge gateway interface which is used as default.
	DefaultExternalNetworkIP *string `json:"defaultExternalNetworkIp,omitempty" tf:"default_external_network_ip,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable distributed routing
	DistributedRouting *bool `json:"distributedRouting,omitempty" tf:"distributed_routing,omitempty"`

	// One or more blocks with external network information to be attached to this gateway's interface
	ExternalNetwork []ExternalNetworkObservation `json:"externalNetwork,omitempty" tf:"external_network,omitempty"`

	// List of IP addresses set on edge gateway external network interfaces
	ExternalNetworkIps []*string `json:"externalNetworkIps,omitempty" tf:"external_network_ips,omitempty"`

	// Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
	FipsModeEnabled *bool `json:"fipsModeEnabled,omitempty" tf:"fips_mode_enabled,omitempty"`

	// 'accept' or 'deny'. Default 'deny'
	FwDefaultRuleAction *string `json:"fwDefaultRuleAction,omitempty" tf:"fw_default_rule_action,omitempty"`

	// Enable logging for default rule. Default 'false'
	FwDefaultRuleLoggingEnabled *bool `json:"fwDefaultRuleLoggingEnabled,omitempty" tf:"fw_default_rule_logging_enabled,omitempty"`

	// Enable firewall. Default 'true'
	FwEnabled *bool `json:"fwEnabled,omitempty" tf:"fw_enabled,omitempty"`

	// Enable high availability on this edge gateway
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Enable load balancer acceleration. (Disabled by default)
	LBAccelerationEnabled *bool `json:"lbAccelerationEnabled,omitempty" tf:"lb_acceleration_enabled,omitempty"`

	// Enable load balancing. (Disabled by default)
	LBEnabled *bool `json:"lbEnabled,omitempty" tf:"lb_enabled,omitempty"`

	// Enable load balancer logging. (Disabled by default)
	LBLoggingEnabled *bool `json:"lbLoggingEnabled,omitempty" tf:"lb_logging_enabled,omitempty"`

	// Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
	LBLoglevel *string `json:"lbLoglevel,omitempty" tf:"lb_loglevel,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
	UseDefaultRouteForDNSRelay *bool `json:"useDefaultRouteForDnsRelay,omitempty" tf:"use_default_route_for_dns_relay,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type EdgegatewayParameters struct {

	// Configuration of the vShield edge VM for this gateway. One of: compact, full ("Large"), full4 ("Quad Large"), x-large
	// +kubebuilder:validation:Optional
	Configuration *string `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Enable distributed routing
	// +kubebuilder:validation:Optional
	DistributedRouting *bool `json:"distributedRouting,omitempty" tf:"distributed_routing,omitempty"`

	// One or more blocks with external network information to be attached to this gateway's interface
	// +kubebuilder:validation:Optional
	ExternalNetwork []ExternalNetworkParameters `json:"externalNetwork,omitempty" tf:"external_network,omitempty"`

	// Enable FIPS mode. FIPS mode turns on the cipher suites that comply with FIPS. (False by default)
	// +kubebuilder:validation:Optional
	FipsModeEnabled *bool `json:"fipsModeEnabled,omitempty" tf:"fips_mode_enabled,omitempty"`

	// 'accept' or 'deny'. Default 'deny'
	// +kubebuilder:validation:Optional
	FwDefaultRuleAction *string `json:"fwDefaultRuleAction,omitempty" tf:"fw_default_rule_action,omitempty"`

	// Enable logging for default rule. Default 'false'
	// +kubebuilder:validation:Optional
	FwDefaultRuleLoggingEnabled *bool `json:"fwDefaultRuleLoggingEnabled,omitempty" tf:"fw_default_rule_logging_enabled,omitempty"`

	// Enable firewall. Default 'true'
	// +kubebuilder:validation:Optional
	FwEnabled *bool `json:"fwEnabled,omitempty" tf:"fw_enabled,omitempty"`

	// Enable high availability on this edge gateway
	// +kubebuilder:validation:Optional
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	// Enable load balancer acceleration. (Disabled by default)
	// +kubebuilder:validation:Optional
	LBAccelerationEnabled *bool `json:"lbAccelerationEnabled,omitempty" tf:"lb_acceleration_enabled,omitempty"`

	// Enable load balancing. (Disabled by default)
	// +kubebuilder:validation:Optional
	LBEnabled *bool `json:"lbEnabled,omitempty" tf:"lb_enabled,omitempty"`

	// Enable load balancer logging. (Disabled by default)
	// +kubebuilder:validation:Optional
	LBLoggingEnabled *bool `json:"lbLoggingEnabled,omitempty" tf:"lb_logging_enabled,omitempty"`

	// Log level. One of 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug'. ('info' by default)
	// +kubebuilder:validation:Optional
	LBLoglevel *string `json:"lbLoglevel,omitempty" tf:"lb_loglevel,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// If true, default gateway will be used for the edge gateways' default routing and DNS forwarding.(False by default)
	// +kubebuilder:validation:Optional
	UseDefaultRouteForDNSRelay *bool `json:"useDefaultRouteForDnsRelay,omitempty" tf:"use_default_route_for_dns_relay,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type ExternalNetworkObservation struct {

	// Enable rate limiting
	EnableRateLimit *bool `json:"enableRateLimit,omitempty" tf:"enable_rate_limit,omitempty"`

	// Incoming rate limit (Mbps)
	IncomingRateLimit *float64 `json:"incomingRateLimit,omitempty" tf:"incoming_rate_limit,omitempty"`

	// External network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Outgoing rate limit (Mbps)
	OutgoingRateLimit *float64 `json:"outgoingRateLimit,omitempty" tf:"outgoing_rate_limit,omitempty"`

	Subnet []SubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type ExternalNetworkParameters struct {

	// Enable rate limiting
	// +kubebuilder:validation:Optional
	EnableRateLimit *bool `json:"enableRateLimit,omitempty" tf:"enable_rate_limit,omitempty"`

	// Incoming rate limit (Mbps)
	// +kubebuilder:validation:Optional
	IncomingRateLimit *float64 `json:"incomingRateLimit,omitempty" tf:"incoming_rate_limit,omitempty"`

	// External network name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Outgoing rate limit (Mbps)
	// +kubebuilder:validation:Optional
	OutgoingRateLimit *float64 `json:"outgoingRateLimit,omitempty" tf:"outgoing_rate_limit,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []SubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type SuballocatePoolObservation struct {
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type SuballocatePoolParameters struct {

	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type SubnetObservation struct {

	// Gateway address for a subnet
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// IP address on the edge gateway - will be auto-assigned if not defined
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Netmask address for a subnet
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// Define zero or more blocks to sub-allocate pools on the edge gateway
	SuballocatePool []SuballocatePoolObservation `json:"suballocatePool,omitempty" tf:"suballocate_pool,omitempty"`

	// Defines if this subnet should be used as default gateway for edge
	UseForDefaultRoute *bool `json:"useForDefaultRoute,omitempty" tf:"use_for_default_route,omitempty"`
}

type SubnetParameters struct {

	// Gateway address for a subnet
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// IP address on the edge gateway - will be auto-assigned if not defined
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Netmask address for a subnet
	// +kubebuilder:validation:Required
	Netmask *string `json:"netmask" tf:"netmask,omitempty"`

	// Define zero or more blocks to sub-allocate pools on the edge gateway
	// +kubebuilder:validation:Optional
	SuballocatePool []SuballocatePoolParameters `json:"suballocatePool,omitempty" tf:"suballocate_pool,omitempty"`

	// Defines if this subnet should be used as default gateway for edge
	// +kubebuilder:validation:Optional
	UseForDefaultRoute *bool `json:"useForDefaultRoute,omitempty" tf:"use_for_default_route,omitempty"`
}

// EdgegatewaySpec defines the desired state of Edgegateway
type EdgegatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgegatewayParameters `json:"forProvider"`
}

// EdgegatewayStatus defines the observed state of Edgegateway.
type EdgegatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgegatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Edgegateway is the Schema for the Edgegateways API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Edgegateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.configuration)",message="configuration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.externalNetwork)",message="externalNetwork is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   EdgegatewaySpec   `json:"spec"`
	Status EdgegatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgegatewayList contains a list of Edgegateways
type EdgegatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Edgegateway `json:"items"`
}

// Repository type metadata.
var (
	Edgegateway_Kind             = "Edgegateway"
	Edgegateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Edgegateway_Kind}.String()
	Edgegateway_KindAPIVersion   = Edgegateway_Kind + "." + CRDGroupVersion.String()
	Edgegateway_GroupVersionKind = CRDGroupVersion.WithKind(Edgegateway_Kind)
)

func init() {
	SchemeBuilder.Register(&Edgegateway{}, &EdgegatewayList{})
}
