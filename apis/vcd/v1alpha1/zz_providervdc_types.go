/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeCapacityCPUObservation struct {
	Allocation *float64 `json:"allocation,omitempty" tf:"allocation,omitempty"`

	Overhead *float64 `json:"overhead,omitempty" tf:"overhead,omitempty"`

	Reserved *float64 `json:"reserved,omitempty" tf:"reserved,omitempty"`

	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`

	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type ComputeCapacityCPUParameters struct {
}

type ComputeCapacityMemoryObservation struct {
	Allocation *float64 `json:"allocation,omitempty" tf:"allocation,omitempty"`

	Overhead *float64 `json:"overhead,omitempty" tf:"overhead,omitempty"`

	Reserved *float64 `json:"reserved,omitempty" tf:"reserved,omitempty"`

	Total *float64 `json:"total,omitempty" tf:"total,omitempty"`

	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	Used *float64 `json:"used,omitempty" tf:"used,omitempty"`
}

type ComputeCapacityMemoryParameters struct {
}

type ProviderVdcComputeCapacityObservation struct {
	CPU []ComputeCapacityCPUObservation `json:"cpu,omitempty" tf:"cpu,omitempty"`

	IsElastic *bool `json:"isElastic,omitempty" tf:"is_elastic,omitempty"`

	IsHa *bool `json:"isHa,omitempty" tf:"is_ha,omitempty"`

	Memory []ComputeCapacityMemoryObservation `json:"memory,omitempty" tf:"memory,omitempty"`
}

type ProviderVdcComputeCapacityParameters struct {
}

type ProviderVdcObservation struct {

	// Set of virtual hardware versions supported by this Provider VDC
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	// Single-element list with an indicator of CPU and memory capacity
	ComputeCapacity []ProviderVdcComputeCapacityObservation `json:"computeCapacity,omitempty" tf:"compute_capacity,omitempty"`

	// Represents the compute fault domain for this Provider VDC. This value is a tenant-facing tag that is shown to tenants when viewing fault domains of the child Organization VDCs (for example, a VDC Group)
	ComputeProviderScope *string `json:"computeProviderScope,omitempty" tf:"compute_provider_scope,omitempty"`

	// Optional description of the Provider VDC
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Set of IDs of external networks
	ExternalNetworkIds []*string `json:"externalNetworkIds,omitempty" tf:"external_network_ids,omitempty"`

	// The highest virtual hardware version supported by this Provider VDC
	HighestSupportedHardwareVersion *string `json:"highestSupportedHardwareVersion,omitempty" tf:"highest_supported_hardware_version,omitempty"`

	// Set with all the hosts which are connected to VC server
	HostIds []*string `json:"hostIds,omitempty" tf:"host_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the Provider VDC
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set IDs of the network pools used by this Provider VDC
	NetworkPoolIds []*string `json:"networkPoolIds,omitempty" tf:"network_pool_ids,omitempty"`

	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// Set of IDs of the resource pools backing this provider VDC
	ResourcePoolIds []*string `json:"resourcePoolIds,omitempty" tf:"resource_pool_ids,omitempty"`

	// Status of the Provider VDC, it can be -1 (creation failed), 0 (not ready), 1 (ready), 2 (unknown) or 3 (unrecognized)
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Set of IDs of the vSphere datastores backing this provider VDC
	StorageContainerIds []*string `json:"storageContainerIds,omitempty" tf:"storage_container_ids,omitempty"`

	// Set of IDs to the storage profiles available to this Provider VDC
	StorageProfileIds []*string `json:"storageProfileIds,omitempty" tf:"storage_profile_ids,omitempty"`

	// Set of storage profile names used to create this Provider VDC
	StorageProfileNames []*string `json:"storageProfileNames,omitempty" tf:"storage_profile_names,omitempty"`

	// ID of the universal network reference
	UniversalNetworkPoolID *string `json:"universalNetworkPoolId,omitempty" tf:"universal_network_pool_id,omitempty"`

	// ID of the vCenter server that provides the resource pools and datastores
	VcenterID *string `json:"vcenterId,omitempty" tf:"vcenter_id,omitempty"`
}

type ProviderVdcParameters struct {

	// Optional description of the Provider VDC
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The highest virtual hardware version supported by this Provider VDC
	// +kubebuilder:validation:Optional
	HighestSupportedHardwareVersion *string `json:"highestSupportedHardwareVersion,omitempty" tf:"highest_supported_hardware_version,omitempty"`

	// True if this Provider VDC is enabled and can provide resources to organization VDCs. A Provider VDC is always enabled on creation
	// +kubebuilder:validation:Optional
	IsEnabled *bool `json:"isEnabled,omitempty" tf:"is_enabled,omitempty"`

	// Name of the Provider VDC
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set IDs of the network pools used by this Provider VDC
	// +kubebuilder:validation:Optional
	NetworkPoolIds []*string `json:"networkPoolIds,omitempty" tf:"network_pool_ids,omitempty"`

	// ID of the registered NSX-T Manager that backs networking operations for this Provider VDC
	// +kubebuilder:validation:Optional
	NsxtManagerID *string `json:"nsxtManagerId,omitempty" tf:"nsxt_manager_id,omitempty"`

	// Set of IDs of the resource pools backing this provider VDC
	// +kubebuilder:validation:Optional
	ResourcePoolIds []*string `json:"resourcePoolIds,omitempty" tf:"resource_pool_ids,omitempty"`

	// Set of storage profile names used to create this Provider VDC
	// +kubebuilder:validation:Optional
	StorageProfileNames []*string `json:"storageProfileNames,omitempty" tf:"storage_profile_names,omitempty"`

	// ID of the vCenter server that provides the resource pools and datastores
	// +kubebuilder:validation:Optional
	VcenterID *string `json:"vcenterId,omitempty" tf:"vcenter_id,omitempty"`
}

// ProviderVdcSpec defines the desired state of ProviderVdc
type ProviderVdcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderVdcParameters `json:"forProvider"`
}

// ProviderVdcStatus defines the observed state of ProviderVdc.
type ProviderVdcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderVdcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderVdc is the Schema for the ProviderVdcs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ProviderVdc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.highestSupportedHardwareVersion)",message="highestSupportedHardwareVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nsxtManagerId)",message="nsxtManagerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.resourcePoolIds)",message="resourcePoolIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.storageProfileNames)",message="storageProfileNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vcenterId)",message="vcenterId is a required parameter"
	Spec   ProviderVdcSpec   `json:"spec"`
	Status ProviderVdcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderVdcList contains a list of ProviderVdcs
type ProviderVdcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderVdc `json:"items"`
}

// Repository type metadata.
var (
	ProviderVdc_Kind             = "ProviderVdc"
	ProviderVdc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderVdc_Kind}.String()
	ProviderVdc_KindAPIVersion   = ProviderVdc_Kind + "." + CRDGroupVersion.String()
	ProviderVdc_GroupVersionKind = CRDGroupVersion.WithKind(ProviderVdc_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderVdc{}, &ProviderVdcList{})
}
