/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VmAffinityRuleObservation struct {

	// True if this affinity rule is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// VM affinity rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One of 'Affinity', 'Anti-Affinity'
	Polarity *string `json:"polarity,omitempty" tf:"polarity,omitempty"`

	// True if this affinity rule is required. When a rule is mandatory, a host failover will not power on the VM if doing so would violate the rule
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Set of VM IDs assigned to this rule
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VmAffinityRuleParameters struct {

	// True if this affinity rule is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// VM affinity rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// One of 'Affinity', 'Anti-Affinity'
	// +kubebuilder:validation:Optional
	Polarity *string `json:"polarity,omitempty" tf:"polarity,omitempty"`

	// True if this affinity rule is required. When a rule is mandatory, a host failover will not power on the VM if doing so would violate the rule
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// Set of VM IDs assigned to this rule
	// +kubebuilder:validation:Optional
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// VmAffinityRuleSpec defines the desired state of VmAffinityRule
type VmAffinityRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmAffinityRuleParameters `json:"forProvider"`
}

// VmAffinityRuleStatus defines the observed state of VmAffinityRule.
type VmAffinityRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmAffinityRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmAffinityRule is the Schema for the VmAffinityRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VmAffinityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.polarity)",message="polarity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vmIds)",message="vmIds is a required parameter"
	Spec   VmAffinityRuleSpec   `json:"spec"`
	Status VmAffinityRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmAffinityRuleList contains a list of VmAffinityRules
type VmAffinityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmAffinityRule `json:"items"`
}

// Repository type metadata.
var (
	VmAffinityRule_Kind             = "VmAffinityRule"
	VmAffinityRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VmAffinityRule_Kind}.String()
	VmAffinityRule_KindAPIVersion   = VmAffinityRule_Kind + "." + CRDGroupVersion.String()
	VmAffinityRule_GroupVersionKind = CRDGroupVersion.WithKind(VmAffinityRule_Kind)
)

func init() {
	SchemeBuilder.Register(&VmAffinityRule{}, &VmAffinityRuleList{})
}
