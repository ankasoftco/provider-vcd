/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VmPlacementPolicyObservation struct {

	// Description of the VM Placement Policy
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the entries set in this attribute
	LogicalVMGroupIds []*string `json:"logicalVmGroupIds,omitempty" tf:"logical_vm_group_ids,omitempty"`

	// Name of the VM Placement Policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the Provider VDC to which the VM Placement Policy belongs
	ProviderVdcID *string `json:"providerVdcId,omitempty" tf:"provider_vdc_id,omitempty"`

	// IDs of the collection of VMs with similar host requirements
	VMGroupIds []*string `json:"vmGroupIds,omitempty" tf:"vm_group_ids,omitempty"`
}

type VmPlacementPolicyParameters struct {

	// Description of the VM Placement Policy
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IDs of one or more Logical VM Groups to define this VM Placement Policy. There is an AND relationship among all the entries set in this attribute
	// +kubebuilder:validation:Optional
	LogicalVMGroupIds []*string `json:"logicalVmGroupIds,omitempty" tf:"logical_vm_group_ids,omitempty"`

	// Name of the VM Placement Policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the Provider VDC to which the VM Placement Policy belongs
	// +kubebuilder:validation:Optional
	ProviderVdcID *string `json:"providerVdcId,omitempty" tf:"provider_vdc_id,omitempty"`

	// IDs of the collection of VMs with similar host requirements
	// +kubebuilder:validation:Optional
	VMGroupIds []*string `json:"vmGroupIds,omitempty" tf:"vm_group_ids,omitempty"`
}

// VmPlacementPolicySpec defines the desired state of VmPlacementPolicy
type VmPlacementPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmPlacementPolicyParameters `json:"forProvider"`
}

// VmPlacementPolicyStatus defines the observed state of VmPlacementPolicy.
type VmPlacementPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmPlacementPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmPlacementPolicy is the Schema for the VmPlacementPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VmPlacementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.providerVdcId)",message="providerVdcId is a required parameter"
	Spec   VmPlacementPolicySpec   `json:"spec"`
	Status VmPlacementPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmPlacementPolicyList contains a list of VmPlacementPolicys
type VmPlacementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmPlacementPolicy `json:"items"`
}

// Repository type metadata.
var (
	VmPlacementPolicy_Kind             = "VmPlacementPolicy"
	VmPlacementPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VmPlacementPolicy_Kind}.String()
	VmPlacementPolicy_KindAPIVersion   = VmPlacementPolicy_Kind + "." + CRDGroupVersion.String()
	VmPlacementPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VmPlacementPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VmPlacementPolicy{}, &VmPlacementPolicyList{})
}
