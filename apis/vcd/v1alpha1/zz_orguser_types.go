/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgUserObservation struct {

	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	DeployedVMQuota *float64 `json:"deployedVmQuota,omitempty" tf:"deployed_vm_quota,omitempty"`

	// The user's description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The user's email address
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// True if the user is enabled and can log in.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The user's full name
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// Read only. Set of group names that this user belongs to
	GroupNames []*string `json:"groupNames,omitempty" tf:"group_names,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The user's telephone
	InstantMessaging *string `json:"instantMessaging,omitempty" tf:"instant_messaging,omitempty"`

	// True if this user is imported from an external resource, like an LDAP.
	IsExternal *bool `json:"isExternal,omitempty" tf:"is_external,omitempty"`

	// True if this user has a group role.
	IsGroupRole *bool `json:"isGroupRole,omitempty" tf:"is_group_role,omitempty"`

	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the system can lock the user). To unlock the user re-set this flag to false.
	IsLocked *bool `json:"isLocked,omitempty" tf:"is_locked,omitempty"`

	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless is_external is true.
	PasswordFile *string `json:"passwordFile,omitempty" tf:"password_file,omitempty"`

	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value 'INTEGRATED' is used.
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// Role within the organization
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	StoredVMQuota *float64 `json:"storedVmQuota,omitempty" tf:"stored_vm_quota,omitempty"`

	// Take ownership of user's objects on deletion.
	TakeOwnership *bool `json:"takeOwnership,omitempty" tf:"take_ownership,omitempty"`

	// The user's telephone
	Telephone *string `json:"telephone,omitempty" tf:"telephone,omitempty"`
}

type OrgUserParameters struct {

	// Quota of vApps that this user can deploy. A value of 0 specifies an unlimited quota.
	// +kubebuilder:validation:Optional
	DeployedVMQuota *float64 `json:"deployedVmQuota,omitempty" tf:"deployed_vm_quota,omitempty"`

	// The user's description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The user's email address
	// +kubebuilder:validation:Optional
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// True if the user is enabled and can log in.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The user's full name
	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// The user's telephone
	// +kubebuilder:validation:Optional
	InstantMessaging *string `json:"instantMessaging,omitempty" tf:"instant_messaging,omitempty"`

	// True if this user is imported from an external resource, like an LDAP.
	// +kubebuilder:validation:Optional
	IsExternal *bool `json:"isExternal,omitempty" tf:"is_external,omitempty"`

	// True if this user has a group role.
	// +kubebuilder:validation:Optional
	IsGroupRole *bool `json:"isGroupRole,omitempty" tf:"is_group_role,omitempty"`

	// If the user account has been locked due to too many invalid login attempts, the value will change to true (only the system can lock the user). To unlock the user re-set this flag to false.
	// +kubebuilder:validation:Optional
	IsLocked *bool `json:"isLocked,omitempty" tf:"is_locked,omitempty"`

	// User's name. Only lowercase letters allowed. Cannot be changed after creation
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Name of a file containing the user's password. Either "password_file" or "password" must be included on creation unless is_external is true.
	// +kubebuilder:validation:Optional
	PasswordFile *string `json:"passwordFile,omitempty" tf:"password_file,omitempty"`

	// The user's password. This value is never returned on read. Either "password" or "password_file" must be included on creation unless is_external is true.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Identity provider type for this this user. One of: 'INTEGRATED', 'SAML', 'OAUTH'. When empty, the default value 'INTEGRATED' is used.
	// +kubebuilder:validation:Optional
	ProviderType *string `json:"providerType,omitempty" tf:"provider_type,omitempty"`

	// Role within the organization
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Quota of vApps that this user can store. A value of 0 specifies an unlimited quota.
	// +kubebuilder:validation:Optional
	StoredVMQuota *float64 `json:"storedVmQuota,omitempty" tf:"stored_vm_quota,omitempty"`

	// Take ownership of user's objects on deletion.
	// +kubebuilder:validation:Optional
	TakeOwnership *bool `json:"takeOwnership,omitempty" tf:"take_ownership,omitempty"`

	// The user's telephone
	// +kubebuilder:validation:Optional
	Telephone *string `json:"telephone,omitempty" tf:"telephone,omitempty"`
}

// OrgUserSpec defines the desired state of OrgUser
type OrgUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgUserParameters `json:"forProvider"`
}

// OrgUserStatus defines the observed state of OrgUser.
type OrgUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrgUser is the Schema for the OrgUsers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.role)",message="role is a required parameter"
	Spec   OrgUserSpec   `json:"spec"`
	Status OrgUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgUserList contains a list of OrgUsers
type OrgUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgUser `json:"items"`
}

// Repository type metadata.
var (
	OrgUser_Kind             = "OrgUser"
	OrgUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgUser_Kind}.String()
	OrgUser_KindAPIVersion   = OrgUser_Kind + "." + CRDGroupVersion.String()
	OrgUser_GroupVersionKind = CRDGroupVersion.WithKind(OrgUser_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgUser{}, &OrgUserList{})
}
