/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtAlbServiceEngineGroupObservation struct {

	// NSX-T ALB backing Cloud ID
	ALBCloudID *string `json:"albCloudId,omitempty" tf:"alb_cloud_id,omitempty"`

	// NSX-T ALB Service Engine Group deployed virtual services
	DeployedVirtualServices *float64 `json:"deployedVirtualServices,omitempty" tf:"deployed_virtual_services,omitempty"`

	// NSX-T ALB Service Engine Group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// NSX-T ALB Service Engine Group HA mode
	HaMode *string `json:"haMode,omitempty" tf:"ha_mode,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX-T ALB Importable Service Engine Group Name
	ImportableServiceEngineGroupName *string `json:"importableServiceEngineGroupName,omitempty" tf:"importable_service_engine_group_name,omitempty"`

	// NSX-T ALB Service Engine Group maximum virtual services
	MaxVirtualServices *float64 `json:"maxVirtualServices,omitempty" tf:"max_virtual_services,omitempty"`

	// NSX-T ALB Service Engine Group name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Boolean value that shows if virtual services are overallocated
	Overallocated *bool `json:"overallocated,omitempty" tf:"overallocated,omitempty"`

	// NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'
	ReservationModel *string `json:"reservationModel,omitempty" tf:"reservation_model,omitempty"`

	// NSX-T ALB Service Engine Group reserved virtual services
	ReservedVirtualServices *float64 `json:"reservedVirtualServices,omitempty" tf:"reserved_virtual_services,omitempty"`

	// Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// Boolean value that shows if sync should be performed on every refresh
	SyncOnRefresh *bool `json:"syncOnRefresh,omitempty" tf:"sync_on_refresh,omitempty"`
}

type NsxtAlbServiceEngineGroupParameters struct {

	// NSX-T ALB backing Cloud ID
	// +kubebuilder:validation:Optional
	ALBCloudID *string `json:"albCloudId,omitempty" tf:"alb_cloud_id,omitempty"`

	// NSX-T ALB Service Engine Group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// NSX-T ALB Importable Service Engine Group Name
	// +kubebuilder:validation:Optional
	ImportableServiceEngineGroupName *string `json:"importableServiceEngineGroupName,omitempty" tf:"importable_service_engine_group_name,omitempty"`

	// NSX-T ALB Service Engine Group name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Boolean value that shows if virtual services are overallocated
	// +kubebuilder:validation:Optional
	Overallocated *bool `json:"overallocated,omitempty" tf:"overallocated,omitempty"`

	// NSX-T ALB Service Engine Group reservation model. One of 'DEDICATED', 'SHARED'
	// +kubebuilder:validation:Optional
	ReservationModel *string `json:"reservationModel,omitempty" tf:"reservation_model,omitempty"`

	// Feature set for this ALB Service Engine Group. One of 'STANDARD', 'PREMIUM'.
	// +kubebuilder:validation:Optional
	SupportedFeatureSet *string `json:"supportedFeatureSet,omitempty" tf:"supported_feature_set,omitempty"`

	// Boolean value that shows if sync should be performed on every refresh
	// +kubebuilder:validation:Optional
	SyncOnRefresh *bool `json:"syncOnRefresh,omitempty" tf:"sync_on_refresh,omitempty"`
}

// NsxtAlbServiceEngineGroupSpec defines the desired state of NsxtAlbServiceEngineGroup
type NsxtAlbServiceEngineGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbServiceEngineGroupParameters `json:"forProvider"`
}

// NsxtAlbServiceEngineGroupStatus defines the observed state of NsxtAlbServiceEngineGroup.
type NsxtAlbServiceEngineGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbServiceEngineGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbServiceEngineGroup is the Schema for the NsxtAlbServiceEngineGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbServiceEngineGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.albCloudId)",message="albCloudId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.importableServiceEngineGroupName)",message="importableServiceEngineGroupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.reservationModel)",message="reservationModel is a required parameter"
	Spec   NsxtAlbServiceEngineGroupSpec   `json:"spec"`
	Status NsxtAlbServiceEngineGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbServiceEngineGroupList contains a list of NsxtAlbServiceEngineGroups
type NsxtAlbServiceEngineGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbServiceEngineGroup `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbServiceEngineGroup_Kind             = "NsxtAlbServiceEngineGroup"
	NsxtAlbServiceEngineGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbServiceEngineGroup_Kind}.String()
	NsxtAlbServiceEngineGroup_KindAPIVersion   = NsxtAlbServiceEngineGroup_Kind + "." + CRDGroupVersion.String()
	NsxtAlbServiceEngineGroup_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbServiceEngineGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbServiceEngineGroup{}, &NsxtAlbServiceEngineGroupList{})
}
