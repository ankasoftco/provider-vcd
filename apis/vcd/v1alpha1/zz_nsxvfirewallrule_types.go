/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxvFirewallRuleDestinationObservation struct {

	// Rule is applied to traffic going to any destinations except for the excluded destination. Default 'false'
	Exclude *bool `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// 'vse', 'internal', 'external' or network name
	GatewayInterfaces []*string `json:"gatewayInterfaces,omitempty" tf:"gateway_interfaces,omitempty"`

	// IP address, CIDR, an IP range, or the keyword 'any'
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Set of IP set names
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// Set of org network names
	OrgNetworks []*string `json:"orgNetworks,omitempty" tf:"org_networks,omitempty"`

	// Set of VM IDs
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type NsxvFirewallRuleDestinationParameters struct {

	// Rule is applied to traffic going to any destinations except for the excluded destination. Default 'false'
	// +kubebuilder:validation:Optional
	Exclude *bool `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// 'vse', 'internal', 'external' or network name
	// +kubebuilder:validation:Optional
	GatewayInterfaces []*string `json:"gatewayInterfaces,omitempty" tf:"gateway_interfaces,omitempty"`

	// IP address, CIDR, an IP range, or the keyword 'any'
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Set of IP set names
	// +kubebuilder:validation:Optional
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// Set of org network names
	// +kubebuilder:validation:Optional
	OrgNetworks []*string `json:"orgNetworks,omitempty" tf:"org_networks,omitempty"`

	// Set of VM IDs
	// +kubebuilder:validation:Optional
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type NsxvFirewallRuleObservation struct {

	// This firewall rule will be inserted above the referred one
	AboveRuleID *string `json:"aboveRuleId,omitempty" tf:"above_rule_id,omitempty"`

	// 'accept' or 'deny'. Default 'accept'
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Destination []NsxvFirewallRuleDestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// Edge gateway name in which Firewall Rule is located
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Whether the rule should be enabled. Default 'true'
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether logging should be enabled for this rule. Default 'false'
	LoggingEnabled *bool `json:"loggingEnabled,omitempty" tf:"logging_enabled,omitempty"`

	// Firewall rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Optional. Allows to set custom rule tag
	RuleTag *float64 `json:"ruleTag,omitempty" tf:"rule_tag,omitempty"`

	// Read only. Possible values 'user', 'internal_high'
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	Service []ServiceObservation `json:"service,omitempty" tf:"service,omitempty"`

	Source []NsxvFirewallRuleSourceObservation `json:"source,omitempty" tf:"source,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxvFirewallRuleParameters struct {

	// This firewall rule will be inserted above the referred one
	// +kubebuilder:validation:Optional
	AboveRuleID *string `json:"aboveRuleId,omitempty" tf:"above_rule_id,omitempty"`

	// 'accept' or 'deny'. Default 'accept'
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Destination []NsxvFirewallRuleDestinationParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// Edge gateway name in which Firewall Rule is located
	// +kubebuilder:validation:Optional
	EdgeGateway *string `json:"edgeGateway,omitempty" tf:"edge_gateway,omitempty"`

	// Whether the rule should be enabled. Default 'true'
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether logging should be enabled for this rule. Default 'false'
	// +kubebuilder:validation:Optional
	LoggingEnabled *bool `json:"loggingEnabled,omitempty" tf:"logging_enabled,omitempty"`

	// Firewall rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Optional. Allows to set custom rule tag
	// +kubebuilder:validation:Optional
	RuleTag *float64 `json:"ruleTag,omitempty" tf:"rule_tag,omitempty"`

	// Read only. Possible values 'user', 'internal_high'
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// +kubebuilder:validation:Optional
	Service []ServiceParameters `json:"service,omitempty" tf:"service,omitempty"`

	// +kubebuilder:validation:Optional
	Source []NsxvFirewallRuleSourceParameters `json:"source,omitempty" tf:"source,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxvFirewallRuleSourceObservation struct {

	// Rule is applied to traffic coming from all sources except for the excluded source. Default 'false'
	Exclude *bool `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// 'vse', 'internal', 'external' or network name
	GatewayInterfaces []*string `json:"gatewayInterfaces,omitempty" tf:"gateway_interfaces,omitempty"`

	// IP address, CIDR, an IP range, or the keyword 'any'
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Set of IP set names
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// Set of org network names
	OrgNetworks []*string `json:"orgNetworks,omitempty" tf:"org_networks,omitempty"`

	// Set of VM IDs
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type NsxvFirewallRuleSourceParameters struct {

	// Rule is applied to traffic coming from all sources except for the excluded source. Default 'false'
	// +kubebuilder:validation:Optional
	Exclude *bool `json:"exclude,omitempty" tf:"exclude,omitempty"`

	// 'vse', 'internal', 'external' or network name
	// +kubebuilder:validation:Optional
	GatewayInterfaces []*string `json:"gatewayInterfaces,omitempty" tf:"gateway_interfaces,omitempty"`

	// IP address, CIDR, an IP range, or the keyword 'any'
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Set of IP set names
	// +kubebuilder:validation:Optional
	IPSets []*string `json:"ipSets,omitempty" tf:"ip_sets,omitempty"`

	// Set of org network names
	// +kubebuilder:validation:Optional
	OrgNetworks []*string `json:"orgNetworks,omitempty" tf:"org_networks,omitempty"`

	// Set of VM IDs
	// +kubebuilder:validation:Optional
	VMIds []*string `json:"vmIds,omitempty" tf:"vm_ids,omitempty"`
}

type ServiceObservation struct {
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

type ServiceParameters struct {

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

// NsxvFirewallRuleSpec defines the desired state of NsxvFirewallRule
type NsxvFirewallRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxvFirewallRuleParameters `json:"forProvider"`
}

// NsxvFirewallRuleStatus defines the observed state of NsxvFirewallRule.
type NsxvFirewallRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxvFirewallRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxvFirewallRule is the Schema for the NsxvFirewallRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxvFirewallRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.destination)",message="destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGateway)",message="edgeGateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.service)",message="service is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.source)",message="source is a required parameter"
	Spec   NsxvFirewallRuleSpec   `json:"spec"`
	Status NsxvFirewallRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxvFirewallRuleList contains a list of NsxvFirewallRules
type NsxvFirewallRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxvFirewallRule `json:"items"`
}

// Repository type metadata.
var (
	NsxvFirewallRule_Kind             = "NsxvFirewallRule"
	NsxvFirewallRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxvFirewallRule_Kind}.String()
	NsxvFirewallRule_KindAPIVersion   = NsxvFirewallRule_Kind + "." + CRDGroupVersion.String()
	NsxvFirewallRule_GroupVersionKind = CRDGroupVersion.WithKind(NsxvFirewallRule_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxvFirewallRule{}, &NsxvFirewallRuleList{})
}
