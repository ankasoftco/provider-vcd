/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogMediaMetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogMediaMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogMediaObservation struct {

	// catalog name where to upload the Media file
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// ID of the catalog where to upload the Media file
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// Creation date
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// True if this media file is ISO
	IsIso *bool `json:"isIso,omitempty" tf:"is_iso,omitempty"`

	// True if this media file is in a published catalog
	IsPublished *bool `json:"isPublished,omitempty" tf:"is_published,omitempty"`

	// absolute or relative path to Media file
	MediaPath *string `json:"mediaPath,omitempty" tf:"media_path,omitempty"`

	// Key and value pairs for catalog item metadata
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given Catalog Media
	MetadataEntry []CatalogMediaMetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// media name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Owner name
	OwnerName *string `json:"ownerName,omitempty" tf:"owner_name,omitempty"`

	// shows upload progress in stdout
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// Media storage in Bytes
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// Media status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Storage profile name
	StorageProfileName *string `json:"storageProfileName,omitempty" tf:"storage_profile_name,omitempty"`

	// size of upload file piece size in mega bytes
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

type CatalogMediaParameters struct {

	// catalog name where to upload the Media file
	// +kubebuilder:validation:Optional
	Catalog *string `json:"catalog,omitempty" tf:"catalog,omitempty"`

	// ID of the catalog where to upload the Media file
	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// absolute or relative path to Media file
	// +kubebuilder:validation:Optional
	MediaPath *string `json:"mediaPath,omitempty" tf:"media_path,omitempty"`

	// Key and value pairs for catalog item metadata
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given Catalog Media
	// +kubebuilder:validation:Optional
	MetadataEntry []CatalogMediaMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// media name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// shows upload progress in stdout
	// +kubebuilder:validation:Optional
	ShowUploadProgress *bool `json:"showUploadProgress,omitempty" tf:"show_upload_progress,omitempty"`

	// size of upload file piece size in mega bytes
	// +kubebuilder:validation:Optional
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

// CatalogMediaSpec defines the desired state of CatalogMedia
type CatalogMediaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogMediaParameters `json:"forProvider"`
}

// CatalogMediaStatus defines the observed state of CatalogMedia.
type CatalogMediaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogMediaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogMedia is the Schema for the CatalogMedias API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type CatalogMedia struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.mediaPath)",message="mediaPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   CatalogMediaSpec   `json:"spec"`
	Status CatalogMediaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogMediaList contains a list of CatalogMedias
type CatalogMediaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatalogMedia `json:"items"`
}

// Repository type metadata.
var (
	CatalogMedia_Kind             = "CatalogMedia"
	CatalogMedia_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatalogMedia_Kind}.String()
	CatalogMedia_KindAPIVersion   = CatalogMedia_Kind + "." + CRDGroupVersion.String()
	CatalogMedia_GroupVersionKind = CRDGroupVersion.WithKind(CatalogMedia_Kind)
)

func init() {
	SchemeBuilder.Register(&CatalogMedia{}, &CatalogMediaList{})
}
