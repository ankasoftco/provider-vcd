/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtEdgeGatewayBgpIpPrefixListIPPrefixObservation struct {

	// Action 'PERMIT' or 'DENY'
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Greater than or equal to subnet mask
	GreaterThanOrEqualTo *float64 `json:"greaterThanOrEqualTo,omitempty" tf:"greater_than_or_equal_to,omitempty"`

	// Less than or equal to subnet mask
	LessThanOrEqualTo *float64 `json:"lessThanOrEqualTo,omitempty" tf:"less_than_or_equal_to,omitempty"`

	// Network in CIDR notation (e.g. '192.168.100.0/24', '2001:db8::/48')
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type NsxtEdgeGatewayBgpIpPrefixListIPPrefixParameters struct {

	// Action 'PERMIT' or 'DENY'
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// Greater than or equal to subnet mask
	// +kubebuilder:validation:Optional
	GreaterThanOrEqualTo *float64 `json:"greaterThanOrEqualTo,omitempty" tf:"greater_than_or_equal_to,omitempty"`

	// Less than or equal to subnet mask
	// +kubebuilder:validation:Optional
	LessThanOrEqualTo *float64 `json:"lessThanOrEqualTo,omitempty" tf:"less_than_or_equal_to,omitempty"`

	// Network in CIDR notation (e.g. '192.168.100.0/24', '2001:db8::/48')
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`
}

type NsxtEdgeGatewayBgpIpPrefixListObservation struct {

	// BGP IP Prefix List description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge gateway ID for BGP IP Prefix List Configuration
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// BGP IP Prefix List entry
	IPPrefix []NsxtEdgeGatewayBgpIpPrefixListIPPrefixObservation `json:"ipPrefix,omitempty" tf:"ip_prefix,omitempty"`

	// BGP IP Prefix List name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

type NsxtEdgeGatewayBgpIpPrefixListParameters struct {

	// BGP IP Prefix List description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge gateway ID for BGP IP Prefix List Configuration
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// BGP IP Prefix List entry
	// +kubebuilder:validation:Optional
	IPPrefix []NsxtEdgeGatewayBgpIpPrefixListIPPrefixParameters `json:"ipPrefix,omitempty" tf:"ip_prefix,omitempty"`

	// BGP IP Prefix List name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

// NsxtEdgeGatewayBgpIpPrefixListSpec defines the desired state of NsxtEdgeGatewayBgpIpPrefixList
type NsxtEdgeGatewayBgpIpPrefixListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtEdgeGatewayBgpIpPrefixListParameters `json:"forProvider"`
}

// NsxtEdgeGatewayBgpIpPrefixListStatus defines the observed state of NsxtEdgeGatewayBgpIpPrefixList.
type NsxtEdgeGatewayBgpIpPrefixListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtEdgeGatewayBgpIpPrefixListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtEdgeGatewayBgpIpPrefixList is the Schema for the NsxtEdgeGatewayBgpIpPrefixLists API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtEdgeGatewayBgpIpPrefixList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGatewayId)",message="edgeGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipPrefix)",message="ipPrefix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   NsxtEdgeGatewayBgpIpPrefixListSpec   `json:"spec"`
	Status NsxtEdgeGatewayBgpIpPrefixListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtEdgeGatewayBgpIpPrefixListList contains a list of NsxtEdgeGatewayBgpIpPrefixLists
type NsxtEdgeGatewayBgpIpPrefixListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtEdgeGatewayBgpIpPrefixList `json:"items"`
}

// Repository type metadata.
var (
	NsxtEdgeGatewayBgpIpPrefixList_Kind             = "NsxtEdgeGatewayBgpIpPrefixList"
	NsxtEdgeGatewayBgpIpPrefixList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtEdgeGatewayBgpIpPrefixList_Kind}.String()
	NsxtEdgeGatewayBgpIpPrefixList_KindAPIVersion   = NsxtEdgeGatewayBgpIpPrefixList_Kind + "." + CRDGroupVersion.String()
	NsxtEdgeGatewayBgpIpPrefixList_GroupVersionKind = CRDGroupVersion.WithKind(NsxtEdgeGatewayBgpIpPrefixList_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtEdgeGatewayBgpIpPrefixList{}, &NsxtEdgeGatewayBgpIpPrefixListList{})
}
