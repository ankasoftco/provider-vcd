/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParticipatingOrgVdcsObservation struct {
	FaultDomainTag *string `json:"faultDomainTag,omitempty" tf:"fault_domain_tag,omitempty"`

	IsRemoteOrg *bool `json:"isRemoteOrg,omitempty" tf:"is_remote_org,omitempty"`

	NetworkProviderScope *string `json:"networkProviderScope,omitempty" tf:"network_provider_scope,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	OrgName *string `json:"orgName,omitempty" tf:"org_name,omitempty"`

	SiteID *string `json:"siteId,omitempty" tf:"site_id,omitempty"`

	SiteName *string `json:"siteName,omitempty" tf:"site_name,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	VdcID *string `json:"vdcId,omitempty" tf:"vdc_id,omitempty"`

	VdcName *string `json:"vdcName,omitempty" tf:"vdc_name,omitempty"`
}

type ParticipatingOrgVdcsParameters struct {
}

type VdcGroupObservation struct {

	// Default Policy Status
	DefaultPolicyStatus *bool `json:"defaultPolicyStatus,omitempty" tf:"default_policy_status,omitempty"`

	// VDC group description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Distributed firewall status
	DfwEnabled *bool `json:"dfwEnabled,omitempty" tf:"dfw_enabled,omitempty"`

	// More detailed error message when VDC group has error status
	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Status whether local egress is enabled for a universal router belonging to a universal VDC group
	LocalEgress *bool `json:"localEgress,omitempty" tf:"local_egress,omitempty"`

	// Name of VDC group
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of used network pool
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`

	// The network providerâ€™s universal id that is backing the universal network pool
	NetworkPoolUniversalID *string `json:"networkPoolUniversalId,omitempty" tf:"network_pool_universal_id,omitempty"`

	// Defines the networking provider backing the VDC Group
	NetworkProviderType *string `json:"networkProviderType,omitempty" tf:"network_provider_type,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The list of organization VDCs that are participating in this group
	ParticipatingOrgVdcs []ParticipatingOrgVdcsObservation `json:"participatingOrgVdcs,omitempty" tf:"participating_org_vdcs,omitempty"`

	// Participating VDC IDs
	ParticipatingVdcIds []*string `json:"participatingVdcIds,omitempty" tf:"participating_vdc_ids,omitempty"`

	// A flag to remove default firewall rule when DFW and Default Policy are both enabled
	RemoveDefaultFirewallRule *bool `json:"removeDefaultFirewallRule,omitempty" tf:"remove_default_firewall_rule,omitempty"`

	// Starting VDC ID
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`

	// The status that the group can be in (e.g. 'SAVING', 'SAVED', 'CONFIGURING', 'REALIZED', 'REALIZATION_FAILED', 'DELETING', 'DELETE_FAILED', 'OBJECT_NOT_FOUND', 'UNCONFIGURED')
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Defines the group as LOCAL or UNIVERSAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// True means that a VDC group router has been created
	UniversalNetworkingEnabled *bool `json:"universalNetworkingEnabled,omitempty" tf:"universal_networking_enabled,omitempty"`
}

type VdcGroupParameters struct {

	// Default Policy Status
	// +kubebuilder:validation:Optional
	DefaultPolicyStatus *bool `json:"defaultPolicyStatus,omitempty" tf:"default_policy_status,omitempty"`

	// VDC group description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Distributed firewall status
	// +kubebuilder:validation:Optional
	DfwEnabled *bool `json:"dfwEnabled,omitempty" tf:"dfw_enabled,omitempty"`

	// Name of VDC group
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Participating VDC IDs
	// +kubebuilder:validation:Optional
	ParticipatingVdcIds []*string `json:"participatingVdcIds,omitempty" tf:"participating_vdc_ids,omitempty"`

	// A flag to remove default firewall rule when DFW and Default Policy are both enabled
	// +kubebuilder:validation:Optional
	RemoveDefaultFirewallRule *bool `json:"removeDefaultFirewallRule,omitempty" tf:"remove_default_firewall_rule,omitempty"`

	// Starting VDC ID
	// +kubebuilder:validation:Optional
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`
}

// VdcGroupSpec defines the desired state of VdcGroup
type VdcGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VdcGroupParameters `json:"forProvider"`
}

// VdcGroupStatus defines the observed state of VdcGroup.
type VdcGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VdcGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VdcGroup is the Schema for the VdcGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VdcGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.participatingVdcIds)",message="participatingVdcIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.startingVdcId)",message="startingVdcId is a required parameter"
	Spec   VdcGroupSpec   `json:"spec"`
	Status VdcGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VdcGroupList contains a list of VdcGroups
type VdcGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VdcGroup `json:"items"`
}

// Repository type metadata.
var (
	VdcGroup_Kind             = "VdcGroup"
	VdcGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VdcGroup_Kind}.String()
	VdcGroup_KindAPIVersion   = VdcGroup_Kind + "." + CRDGroupVersion.String()
	VdcGroup_GroupVersionKind = CRDGroupVersion.WithKind(VdcGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&VdcGroup{}, &VdcGroupList{})
}
