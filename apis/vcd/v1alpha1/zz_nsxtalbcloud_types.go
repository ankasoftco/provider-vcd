/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtAlbCloudObservation struct {

	// NSX-T ALB Controller ID
	ControllerID *string `json:"controllerId,omitempty" tf:"controller_id,omitempty"`

	// NSX-T ALB Cloud description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// NSX-T ALB Cloud detailed health message
	HealthMessage *string `json:"healthMessage,omitempty" tf:"health_message,omitempty"`

	// NSX-T ALB Cloud health status
	HealthStatus *string `json:"healthStatus,omitempty" tf:"health_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX-T ALB Importable Cloud ID
	ImportableCloudID *string `json:"importableCloudId,omitempty" tf:"importable_cloud_id,omitempty"`

	// NSX-T ALB Cloud name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network pool ID for NSX-T ALB Importable Cloud
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`

	// Network pool name of NSX-T ALB Cloud
	NetworkPoolName *string `json:"networkPoolName,omitempty" tf:"network_pool_name,omitempty"`
}

type NsxtAlbCloudParameters struct {

	// NSX-T ALB Controller ID
	// +kubebuilder:validation:Optional
	ControllerID *string `json:"controllerId,omitempty" tf:"controller_id,omitempty"`

	// NSX-T ALB Cloud description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// NSX-T ALB Importable Cloud ID
	// +kubebuilder:validation:Optional
	ImportableCloudID *string `json:"importableCloudId,omitempty" tf:"importable_cloud_id,omitempty"`

	// NSX-T ALB Cloud name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network pool ID for NSX-T ALB Importable Cloud
	// +kubebuilder:validation:Optional
	NetworkPoolID *string `json:"networkPoolId,omitempty" tf:"network_pool_id,omitempty"`
}

// NsxtAlbCloudSpec defines the desired state of NsxtAlbCloud
type NsxtAlbCloudSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtAlbCloudParameters `json:"forProvider"`
}

// NsxtAlbCloudStatus defines the observed state of NsxtAlbCloud.
type NsxtAlbCloudStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtAlbCloudObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbCloud is the Schema for the NsxtAlbClouds API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtAlbCloud struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.controllerId)",message="controllerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.importableCloudId)",message="importableCloudId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.networkPoolId)",message="networkPoolId is a required parameter"
	Spec   NsxtAlbCloudSpec   `json:"spec"`
	Status NsxtAlbCloudStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtAlbCloudList contains a list of NsxtAlbClouds
type NsxtAlbCloudList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtAlbCloud `json:"items"`
}

// Repository type metadata.
var (
	NsxtAlbCloud_Kind             = "NsxtAlbCloud"
	NsxtAlbCloud_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtAlbCloud_Kind}.String()
	NsxtAlbCloud_KindAPIVersion   = NsxtAlbCloud_Kind + "." + CRDGroupVersion.String()
	NsxtAlbCloud_GroupVersionKind = CRDGroupVersion.WithKind(NsxtAlbCloud_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtAlbCloud{}, &NsxtAlbCloudList{})
}
