/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocatedIpsObservation struct {
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type AllocatedIpsParameters struct {

	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type NsxtEdgeGatewayObservation struct {

	// Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
	DedicateExternalNetwork *bool `json:"dedicateExternalNetwork,omitempty" tf:"dedicate_external_network,omitempty"`

	// Edge Gateway description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
	EdgeClusterID *string `json:"edgeClusterId,omitempty" tf:"edge_cluster_id,omitempty"`

	// External network ID
	ExternalNetworkID *string `json:"externalNetworkId,omitempty" tf:"external_network_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Edge Gateway name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// ID of VDC or VDC Group
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// Primary IP address of edge gateway. Read-only (can be specified in specific subnet)
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`

	// Optional ID of starting VDC if the 'owner_id' is a VDC Group
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`

	// One or more blocks with external network information to be attached to this gateway's interface including IP allocation ranges
	Subnet []NsxtEdgeGatewaySubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Auto allocation of subnets by using per subnet IP allocation counts
	SubnetWithIPCount []SubnetWithIPCountObservation `json:"subnetWithIpCount,omitempty" tf:"subnet_with_ip_count,omitempty"`

	// Subnet definitions for this Edge Gateway. IP allocation is controlled using 'total_allocated_ip_count'
	SubnetWithTotalIPCount []SubnetWithTotalIPCountObservation `json:"subnetWithTotalIpCount,omitempty" tf:"subnet_with_total_ip_count,omitempty"`

	// Total number of IP addresses allocated for this gateway. Can be set with 'subnet_with_total_ip_count' definitions only
	TotalAllocatedIPCount *float64 `json:"totalAllocatedIpCount,omitempty" tf:"total_allocated_ip_count,omitempty"`

	// Number of unused IP addresses
	UnusedIPCount *float64 `json:"unusedIpCount,omitempty" tf:"unused_ip_count,omitempty"`

	// Boolean value that specifies that the Edge Gateway is using IP Spaces
	UseIPSpaces *bool `json:"useIpSpaces,omitempty" tf:"use_ip_spaces,omitempty"`

	// Number of used IP addresses
	UsedIPCount *float64 `json:"usedIpCount,omitempty" tf:"used_ip_count,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtEdgeGatewayParameters struct {

	// Dedicating the External Network will enable Route Advertisement for this Edge Gateway.
	// +kubebuilder:validation:Optional
	DedicateExternalNetwork *bool `json:"dedicateExternalNetwork,omitempty" tf:"dedicate_external_network,omitempty"`

	// Edge Gateway description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Select specific NSX-T Edge Cluster. Will be inherited from external network if not specified
	// +kubebuilder:validation:Optional
	EdgeClusterID *string `json:"edgeClusterId,omitempty" tf:"edge_cluster_id,omitempty"`

	// External network ID
	// +kubebuilder:validation:Optional
	ExternalNetworkID *string `json:"externalNetworkId,omitempty" tf:"external_network_id,omitempty"`

	// Edge Gateway name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// ID of VDC or VDC Group
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// Optional ID of starting VDC if the 'owner_id' is a VDC Group
	// +kubebuilder:validation:Optional
	StartingVdcID *string `json:"startingVdcId,omitempty" tf:"starting_vdc_id,omitempty"`

	// One or more blocks with external network information to be attached to this gateway's interface including IP allocation ranges
	// +kubebuilder:validation:Optional
	Subnet []NsxtEdgeGatewaySubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Auto allocation of subnets by using per subnet IP allocation counts
	// +kubebuilder:validation:Optional
	SubnetWithIPCount []SubnetWithIPCountParameters `json:"subnetWithIpCount,omitempty" tf:"subnet_with_ip_count,omitempty"`

	// Subnet definitions for this Edge Gateway. IP allocation is controlled using 'total_allocated_ip_count'
	// +kubebuilder:validation:Optional
	SubnetWithTotalIPCount []SubnetWithTotalIPCountParameters `json:"subnetWithTotalIpCount,omitempty" tf:"subnet_with_total_ip_count,omitempty"`

	// Total number of IP addresses allocated for this gateway. Can be set with 'subnet_with_total_ip_count' definitions only
	// +kubebuilder:validation:Optional
	TotalAllocatedIPCount *float64 `json:"totalAllocatedIpCount,omitempty" tf:"total_allocated_ip_count,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtEdgeGatewaySubnetObservation struct {

	// Define one or more blocks to sub-allocate pools on the edge gateway
	AllocatedIps []AllocatedIpsObservation `json:"allocatedIps,omitempty" tf:"allocated_ips,omitempty"`

	// Gateway address for a subnet
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Prefix length for a subnet (e.g. 24)
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

type NsxtEdgeGatewaySubnetParameters struct {

	// Define one or more blocks to sub-allocate pools on the edge gateway
	// +kubebuilder:validation:Optional
	AllocatedIps []AllocatedIpsParameters `json:"allocatedIps,omitempty" tf:"allocated_ips,omitempty"`

	// Gateway address for a subnet
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// Prefix length for a subnet (e.g. 24)
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	// +kubebuilder:validation:Optional
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

type SubnetWithIPCountObservation struct {

	// Number of IP addresses to allocate
	AllocatedIPCount *float64 `json:"allocatedIpCount,omitempty" tf:"allocated_ip_count,omitempty"`

	// Gateway address for a subnet
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Prefix length for a subnet (e.g. 24)
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

type SubnetWithIPCountParameters struct {

	// Number of IP addresses to allocate
	// +kubebuilder:validation:Required
	AllocatedIPCount *float64 `json:"allocatedIpCount" tf:"allocated_ip_count,omitempty"`

	// Gateway address for a subnet
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// Prefix length for a subnet (e.g. 24)
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	// +kubebuilder:validation:Optional
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

type SubnetWithTotalIPCountObservation struct {

	// Gateway address for a subnet
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Prefix length for a subnet (e.g. 24)
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

type SubnetWithTotalIPCountParameters struct {

	// Gateway address for a subnet
	// +kubebuilder:validation:Required
	Gateway *string `json:"gateway" tf:"gateway,omitempty"`

	// Prefix length for a subnet (e.g. 24)
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`

	// Primary IP address for the edge gateway - will be auto-assigned if not defined
	// +kubebuilder:validation:Optional
	PrimaryIP *string `json:"primaryIp,omitempty" tf:"primary_ip,omitempty"`
}

// NsxtEdgeGatewaySpec defines the desired state of NsxtEdgeGateway
type NsxtEdgeGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtEdgeGatewayParameters `json:"forProvider"`
}

// NsxtEdgeGatewayStatus defines the observed state of NsxtEdgeGateway.
type NsxtEdgeGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtEdgeGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtEdgeGateway is the Schema for the NsxtEdgeGateways API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtEdgeGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.externalNetworkId)",message="externalNetworkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   NsxtEdgeGatewaySpec   `json:"spec"`
	Status NsxtEdgeGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtEdgeGatewayList contains a list of NsxtEdgeGateways
type NsxtEdgeGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtEdgeGateway `json:"items"`
}

// Repository type metadata.
var (
	NsxtEdgeGateway_Kind             = "NsxtEdgeGateway"
	NsxtEdgeGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtEdgeGateway_Kind}.String()
	NsxtEdgeGateway_KindAPIVersion   = NsxtEdgeGateway_Kind + "." + CRDGroupVersion.String()
	NsxtEdgeGateway_GroupVersionKind = CRDGroupVersion.WithKind(NsxtEdgeGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtEdgeGateway{}, &NsxtEdgeGatewayList{})
}
