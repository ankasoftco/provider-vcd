/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtDistributedFirewallObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Ordered list of firewall rules
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// ID of VDC Group for Distributed Firewall
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type NsxtDistributedFirewallParameters struct {

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Ordered list of firewall rules
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// ID of VDC Group for Distributed Firewall
	// +kubebuilder:validation:Optional
	VdcGroupID *string `json:"vdcGroupId,omitempty" tf:"vdc_group_id,omitempty"`
}

type RuleObservation struct {

	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description is not shown in UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defined if Firewall Rule is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Firewall Rule ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if matching traffic should be logged
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Firewall Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

type RuleParameters struct {

	// Defines if the rule should 'ALLOW', 'DROP', 'REJECT' matching traffic
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// A set of Application Port Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	AppPortProfileIds []*string `json:"appPortProfileIds,omitempty" tf:"app_port_profile_ids,omitempty"`

	// Comment that is shown next to rule in UI (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Description is not shown in UI
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Reverses firewall matching for to match all except Destinations Groups specified in 'destination_ids' (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	DestinationGroupsExcluded *bool `json:"destinationGroupsExcluded,omitempty" tf:"destination_groups_excluded,omitempty"`

	// A set of Destination Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	DestinationIds []*string `json:"destinationIds,omitempty" tf:"destination_ids,omitempty"`

	// Direction on which Firewall Rule applies (One of 'IN', 'OUT', 'IN_OUT')
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Defined if Firewall Rule is active
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Firewall Rule Protocol (One of 'IPV4', 'IPV6', 'IPV4_IPV6')
	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Defines if matching traffic should be logged
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Firewall Rule name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// A set of Network Context Profile IDs. Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	NetworkContextProfileIds []*string `json:"networkContextProfileIds,omitempty" tf:"network_context_profile_ids,omitempty"`

	// Reverses firewall matching for to match all except Source Groups specified in 'source_ids' (VCD 10.3.2+)
	// +kubebuilder:validation:Optional
	SourceGroupsExcluded *bool `json:"sourceGroupsExcluded,omitempty" tf:"source_groups_excluded,omitempty"`

	// A set of Source Firewall Group IDs (IP Sets or Security Groups). Leaving it empty means 'Any'
	// +kubebuilder:validation:Optional
	SourceIds []*string `json:"sourceIds,omitempty" tf:"source_ids,omitempty"`
}

// NsxtDistributedFirewallSpec defines the desired state of NsxtDistributedFirewall
type NsxtDistributedFirewallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtDistributedFirewallParameters `json:"forProvider"`
}

// NsxtDistributedFirewallStatus defines the observed state of NsxtDistributedFirewall.
type NsxtDistributedFirewallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtDistributedFirewallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtDistributedFirewall is the Schema for the NsxtDistributedFirewalls API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtDistributedFirewall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rule)",message="rule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vdcGroupId)",message="vdcGroupId is a required parameter"
	Spec   NsxtDistributedFirewallSpec   `json:"spec"`
	Status NsxtDistributedFirewallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtDistributedFirewallList contains a list of NsxtDistributedFirewalls
type NsxtDistributedFirewallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtDistributedFirewall `json:"items"`
}

// Repository type metadata.
var (
	NsxtDistributedFirewall_Kind             = "NsxtDistributedFirewall"
	NsxtDistributedFirewall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtDistributedFirewall_Kind}.String()
	NsxtDistributedFirewall_KindAPIVersion   = NsxtDistributedFirewall_Kind + "." + CRDGroupVersion.String()
	NsxtDistributedFirewall_GroupVersionKind = CRDGroupVersion.WithKind(NsxtDistributedFirewall_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtDistributedFirewall{}, &NsxtDistributedFirewallList{})
}
