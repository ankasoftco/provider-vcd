/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VAppNetworkDHCPPoolObservation struct {
	DefaultLeaseTime *float64 `json:"defaultLeaseTime,omitempty" tf:"default_lease_time,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	MaxLeaseTime *float64 `json:"maxLeaseTime,omitempty" tf:"max_lease_time,omitempty"`

	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type VAppNetworkDHCPPoolParameters struct {

	// +kubebuilder:validation:Optional
	DefaultLeaseTime *float64 `json:"defaultLeaseTime,omitempty" tf:"default_lease_time,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// +kubebuilder:validation:Optional
	MaxLeaseTime *float64 `json:"maxLeaseTime,omitempty" tf:"max_lease_time,omitempty"`

	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

type VAppNetworkObservation struct {

	// A range of IPs to issue to virtual machines that don't have a static IP
	DHCPPool []VAppNetworkDHCPPoolObservation `json:"dhcpPool,omitempty" tf:"dhcp_pool,omitempty"`

	// DNS suffix
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Optional description for the network
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Primary DNS server
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Secondary DNS server
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// Gateway of the network
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// True if Network allows guest VLAN tagging
	GuestVlanAllowed *bool `json:"guestVlanAllowed,omitempty" tf:"guest_vlan_allowed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// vApp network name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Netmask address for a subnet.
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// org network name to which vapp network is connected
	OrgNetworkName *string `json:"orgNetworkName,omitempty" tf:"org_network_name,omitempty"`

	// Prefix length for a subnet
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
	RebootVappOnRemoval *bool `json:"rebootVappOnRemoval,omitempty" tf:"reboot_vapp_on_removal,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	RetainIPMacEnabled *bool `json:"retainIpMacEnabled,omitempty" tf:"retain_ip_mac_enabled,omitempty"`

	// A range of IPs permitted to be used as static IPs for virtual machines
	StaticIPPool []VAppNetworkStaticIPPoolObservation `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// vApp to use
	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppNetworkParameters struct {

	// A range of IPs to issue to virtual machines that don't have a static IP
	// +kubebuilder:validation:Optional
	DHCPPool []VAppNetworkDHCPPoolParameters `json:"dhcpPool,omitempty" tf:"dhcp_pool,omitempty"`

	// DNS suffix
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Optional description for the network
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Primary DNS server
	// +kubebuilder:validation:Optional
	Dns1 *string `json:"dns1,omitempty" tf:"dns1,omitempty"`

	// Secondary DNS server
	// +kubebuilder:validation:Optional
	Dns2 *string `json:"dns2,omitempty" tf:"dns2,omitempty"`

	// Gateway of the network
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// True if Network allows guest VLAN tagging
	// +kubebuilder:validation:Optional
	GuestVlanAllowed *bool `json:"guestVlanAllowed,omitempty" tf:"guest_vlan_allowed,omitempty"`

	// vApp network name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Netmask address for a subnet.
	// +kubebuilder:validation:Optional
	Netmask *string `json:"netmask,omitempty" tf:"netmask,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// org network name to which vapp network is connected
	// +kubebuilder:validation:Optional
	OrgNetworkName *string `json:"orgNetworkName,omitempty" tf:"org_network_name,omitempty"`

	// Prefix length for a subnet
	// +kubebuilder:validation:Optional
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Specifies whether the vApp should be rebooted when the vApp network is removed. Default is false.
	// +kubebuilder:validation:Optional
	RebootVappOnRemoval *bool `json:"rebootVappOnRemoval,omitempty" tf:"reboot_vapp_on_removal,omitempty"`

	// Specifies whether the network resources such as IP/MAC of router will be retained across deployments. Default is false.
	// +kubebuilder:validation:Optional
	RetainIPMacEnabled *bool `json:"retainIpMacEnabled,omitempty" tf:"retain_ip_mac_enabled,omitempty"`

	// A range of IPs permitted to be used as static IPs for virtual machines
	// +kubebuilder:validation:Optional
	StaticIPPool []VAppNetworkStaticIPPoolParameters `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`

	// vApp to use
	// +kubebuilder:validation:Optional
	VappName *string `json:"vappName,omitempty" tf:"vapp_name,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type VAppNetworkStaticIPPoolObservation struct {
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`
}

type VAppNetworkStaticIPPoolParameters struct {

	// +kubebuilder:validation:Required
	EndAddress *string `json:"endAddress" tf:"end_address,omitempty"`

	// +kubebuilder:validation:Required
	StartAddress *string `json:"startAddress" tf:"start_address,omitempty"`
}

// VAppNetworkSpec defines the desired state of VAppNetwork
type VAppNetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VAppNetworkParameters `json:"forProvider"`
}

// VAppNetworkStatus defines the observed state of VAppNetwork.
type VAppNetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VAppNetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VAppNetwork is the Schema for the VAppNetworks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VAppNetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.gateway)",message="gateway is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vappName)",message="vappName is a required parameter"
	Spec   VAppNetworkSpec   `json:"spec"`
	Status VAppNetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VAppNetworkList contains a list of VAppNetworks
type VAppNetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VAppNetwork `json:"items"`
}

// Repository type metadata.
var (
	VAppNetwork_Kind             = "VAppNetwork"
	VAppNetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VAppNetwork_Kind}.String()
	VAppNetwork_KindAPIVersion   = VAppNetwork_Kind + "." + CRDGroupVersion.String()
	VAppNetwork_GroupVersionKind = CRDGroupVersion.WithKind(VAppNetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&VAppNetwork{}, &VAppNetworkList{})
}
