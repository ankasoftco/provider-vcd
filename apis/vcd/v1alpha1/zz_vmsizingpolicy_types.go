/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VmSizingPolicyCPUObservation struct {

	// The number of cores per socket for a VM. This is a VM hardware configuration. The number of vCPUs that is defined in the VM sizing policy must be divisible by the number of cores per socket. If the number of vCPUs is not divisible by the number of cores per socket, the number of cores per socket becomes invalid.
	CoresPerSocket *string `json:"coresPerSocket,omitempty" tf:"cores_per_socket,omitempty"`

	// Defines the number of vCPUs configured for a VM. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, this count becomes the configured number of vCPUs for the VM.
	Count *string `json:"count,omitempty" tf:"count,omitempty"`

	// Defines the CPU limit in MHz for a VM. If not defined in the VDC compute policy, CPU limit is equal to the vCPU speed multiplied by the number of vCPUs.
	LimitInMhz *string `json:"limitInMhz,omitempty" tf:"limit_in_mhz,omitempty"`

	// Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.
	ReservationGuarantee *string `json:"reservationGuarantee,omitempty" tf:"reservation_guarantee,omitempty"`

	// Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Defines the vCPU speed of a core in MHz.
	SpeedInMhz *string `json:"speedInMhz,omitempty" tf:"speed_in_mhz,omitempty"`
}

type VmSizingPolicyCPUParameters struct {

	// The number of cores per socket for a VM. This is a VM hardware configuration. The number of vCPUs that is defined in the VM sizing policy must be divisible by the number of cores per socket. If the number of vCPUs is not divisible by the number of cores per socket, the number of cores per socket becomes invalid.
	// +kubebuilder:validation:Optional
	CoresPerSocket *string `json:"coresPerSocket,omitempty" tf:"cores_per_socket,omitempty"`

	// Defines the number of vCPUs configured for a VM. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, this count becomes the configured number of vCPUs for the VM.
	// +kubebuilder:validation:Optional
	Count *string `json:"count,omitempty" tf:"count,omitempty"`

	// Defines the CPU limit in MHz for a VM. If not defined in the VDC compute policy, CPU limit is equal to the vCPU speed multiplied by the number of vCPUs.
	// +kubebuilder:validation:Optional
	LimitInMhz *string `json:"limitInMhz,omitempty" tf:"limit_in_mhz,omitempty"`

	// Defines how much of the CPU resources of a VM are reserved. The allocated CPU for a VM equals the number of vCPUs times the vCPU speed in MHz. The value of the attribute ranges between 0 and one. Value of 0 CPU reservation guarantee defines no CPU reservation. Value of 1 defines 100% of CPU reserved.
	// +kubebuilder:validation:Optional
	ReservationGuarantee *string `json:"reservationGuarantee,omitempty" tf:"reservation_guarantee,omitempty"`

	// Defines the number of CPU shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of CPU as another VM, it is entitled to consume twice as much CPU when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	// +kubebuilder:validation:Optional
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Defines the vCPU speed of a core in MHz.
	// +kubebuilder:validation:Optional
	SpeedInMhz *string `json:"speedInMhz,omitempty" tf:"speed_in_mhz,omitempty"`
}

type VmSizingPolicyMemoryObservation struct {

	// Defines the memory limit in MB for a VM. If not defined in the VM sizing policy, memory limit is equal to the allocated memory for the VM.
	LimitInMb *string `json:"limitInMb,omitempty" tf:"limit_in_mb,omitempty"`

	// Defines the reserved amount of memory that is configured for a VM. The value of the attribute ranges between 0 and one. Value of 0 memory reservation guarantee defines no memory reservation. Value of 1 defines 100% of memory reserved.
	ReservationGuarantee *string `json:"reservationGuarantee,omitempty" tf:"reservation_guarantee,omitempty"`

	// Defines the number of memory shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of memory as another VM, it is entitled to consume twice as much memory when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Defines the memory configured for a VM in MB. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, the VM receives the amount of memory defined by this attribute.
	SizeInMb *string `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`
}

type VmSizingPolicyMemoryParameters struct {

	// Defines the memory limit in MB for a VM. If not defined in the VM sizing policy, memory limit is equal to the allocated memory for the VM.
	// +kubebuilder:validation:Optional
	LimitInMb *string `json:"limitInMb,omitempty" tf:"limit_in_mb,omitempty"`

	// Defines the reserved amount of memory that is configured for a VM. The value of the attribute ranges between 0 and one. Value of 0 memory reservation guarantee defines no memory reservation. Value of 1 defines 100% of memory reserved.
	// +kubebuilder:validation:Optional
	ReservationGuarantee *string `json:"reservationGuarantee,omitempty" tf:"reservation_guarantee,omitempty"`

	// Defines the number of memory shares for a VM. Shares specify the relative importance of a VM within a virtual data center. If a VM has twice as many shares of memory as another VM, it is entitled to consume twice as much memory when these two virtual machines are competing for resources. If not defined in the VDC compute policy, normal shares are applied to the VM.
	// +kubebuilder:validation:Optional
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Defines the memory configured for a VM in MB. This is a VM hardware configuration. When a tenant assigns the VM sizing policy to a VM, the VM receives the amount of memory defined by this attribute.
	// +kubebuilder:validation:Optional
	SizeInMb *string `json:"sizeInMb,omitempty" tf:"size_in_mb,omitempty"`
}

type VmSizingPolicyObservation struct {
	CPU []VmSizingPolicyCPUObservation `json:"cpu,omitempty" tf:"cpu,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Memory []VmSizingPolicyMemoryObservation `json:"memory,omitempty" tf:"memory,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use - Deprecated and unneeded: will be ignored if used
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

type VmSizingPolicyParameters struct {

	// +kubebuilder:validation:Optional
	CPU []VmSizingPolicyCPUParameters `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Memory []VmSizingPolicyMemoryParameters `json:"memory,omitempty" tf:"memory,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use - Deprecated and unneeded: will be ignored if used
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

// VmSizingPolicySpec defines the desired state of VmSizingPolicy
type VmSizingPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmSizingPolicyParameters `json:"forProvider"`
}

// VmSizingPolicyStatus defines the observed state of VmSizingPolicy.
type VmSizingPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmSizingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmSizingPolicy is the Schema for the VmSizingPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type VmSizingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   VmSizingPolicySpec   `json:"spec"`
	Status VmSizingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmSizingPolicyList contains a list of VmSizingPolicys
type VmSizingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmSizingPolicy `json:"items"`
}

// Repository type metadata.
var (
	VmSizingPolicy_Kind             = "VmSizingPolicy"
	VmSizingPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VmSizingPolicy_Kind}.String()
	VmSizingPolicy_KindAPIVersion   = VmSizingPolicy_Kind + "." + CRDGroupVersion.String()
	VmSizingPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VmSizingPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VmSizingPolicy{}, &VmSizingPolicyList{})
}
