/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtRouteAdvertisementObservation struct {

	// NSX-T Edge Gateway ID in which route advertisement is located
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Defines if route advertisement is active
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type NsxtRouteAdvertisementParameters struct {

	// NSX-T Edge Gateway ID in which route advertisement is located
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Defines if route advertisement is active
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Set of subnets that will be advertised to Tier-0 gateway. Empty means none
	// +kubebuilder:validation:Optional
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

// NsxtRouteAdvertisementSpec defines the desired state of NsxtRouteAdvertisement
type NsxtRouteAdvertisementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtRouteAdvertisementParameters `json:"forProvider"`
}

// NsxtRouteAdvertisementStatus defines the observed state of NsxtRouteAdvertisement.
type NsxtRouteAdvertisementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtRouteAdvertisementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtRouteAdvertisement is the Schema for the NsxtRouteAdvertisements API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtRouteAdvertisement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGatewayId)",message="edgeGatewayId is a required parameter"
	Spec   NsxtRouteAdvertisementSpec   `json:"spec"`
	Status NsxtRouteAdvertisementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtRouteAdvertisementList contains a list of NsxtRouteAdvertisements
type NsxtRouteAdvertisementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtRouteAdvertisement `json:"items"`
}

// Repository type metadata.
var (
	NsxtRouteAdvertisement_Kind             = "NsxtRouteAdvertisement"
	NsxtRouteAdvertisement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtRouteAdvertisement_Kind}.String()
	NsxtRouteAdvertisement_KindAPIVersion   = NsxtRouteAdvertisement_Kind + "." + CRDGroupVersion.String()
	NsxtRouteAdvertisement_GroupVersionKind = CRDGroupVersion.WithKind(NsxtRouteAdvertisement_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtRouteAdvertisement{}, &NsxtRouteAdvertisementList{})
}
