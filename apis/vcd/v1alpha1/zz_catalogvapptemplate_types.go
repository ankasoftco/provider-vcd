/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogvAppTemplateMetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogvAppTemplateMetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CatalogvAppTemplateObservation struct {

	// ID of the Catalog where to upload the OVA file
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// Timestamp of when the vApp Template was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Key and value pairs for the metadata of this vApp Template
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given vApp Template
	MetadataEntry []CatalogvAppTemplateMetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// vApp Template name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to OVA
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL of OVF file
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// Size of upload file piece size in megabytes
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`

	// Set of VM names within the vApp template
	VMNames []*string `json:"vmNames,omitempty" tf:"vm_names,omitempty"`

	// ID of the VDC to which the vApp Template belongs
	VdcID *string `json:"vdcId,omitempty" tf:"vdc_id,omitempty"`
}

type CatalogvAppTemplateParameters struct {

	// ID of the Catalog where to upload the OVA file
	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// Description of the vApp Template. Not to be used with `ovf_url` when target OVA has a description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key and value pairs for the metadata of this vApp Template
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given vApp Template
	// +kubebuilder:validation:Optional
	MetadataEntry []CatalogvAppTemplateMetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// vApp Template name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Absolute or relative path to OVA
	// +kubebuilder:validation:Optional
	OvaPath *string `json:"ovaPath,omitempty" tf:"ova_path,omitempty"`

	// URL of OVF file
	// +kubebuilder:validation:Optional
	OvfURL *string `json:"ovfUrl,omitempty" tf:"ovf_url,omitempty"`

	// Size of upload file piece size in megabytes
	// +kubebuilder:validation:Optional
	UploadPieceSize *float64 `json:"uploadPieceSize,omitempty" tf:"upload_piece_size,omitempty"`
}

// CatalogvAppTemplateSpec defines the desired state of CatalogvAppTemplate
type CatalogvAppTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogvAppTemplateParameters `json:"forProvider"`
}

// CatalogvAppTemplateStatus defines the observed state of CatalogvAppTemplate.
type CatalogvAppTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogvAppTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogvAppTemplate is the Schema for the CatalogvAppTemplates API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type CatalogvAppTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.catalogId)",message="catalogId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   CatalogvAppTemplateSpec   `json:"spec"`
	Status CatalogvAppTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogvAppTemplateList contains a list of CatalogvAppTemplates
type CatalogvAppTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CatalogvAppTemplate `json:"items"`
}

// Repository type metadata.
var (
	CatalogvAppTemplate_Kind             = "CatalogvAppTemplate"
	CatalogvAppTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CatalogvAppTemplate_Kind}.String()
	CatalogvAppTemplate_KindAPIVersion   = CatalogvAppTemplate_Kind + "." + CRDGroupVersion.String()
	CatalogvAppTemplate_GroupVersionKind = CRDGroupVersion.WithKind(CatalogvAppTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&CatalogvAppTemplate{}, &CatalogvAppTemplateList{})
}
