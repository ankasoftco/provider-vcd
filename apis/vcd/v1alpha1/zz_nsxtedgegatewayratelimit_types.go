/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtEdgeGatewayRateLimitObservation struct {

	// Edge gateway ID for Rate limiting (QoS) configuration
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Egress profile ID for Rate limiting (QoS) configuration
	EgressProfileID *string `json:"egressProfileId,omitempty" tf:"egress_profile_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Ingress profile ID for Rate limiting (QoS) configuration
	IngressProfileID *string `json:"ingressProfileId,omitempty" tf:"ingress_profile_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

type NsxtEdgeGatewayRateLimitParameters struct {

	// Edge gateway ID for Rate limiting (QoS) configuration
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Egress profile ID for Rate limiting (QoS) configuration
	// +kubebuilder:validation:Optional
	EgressProfileID *string `json:"egressProfileId,omitempty" tf:"egress_profile_id,omitempty"`

	// Ingress profile ID for Rate limiting (QoS) configuration
	// +kubebuilder:validation:Optional
	IngressProfileID *string `json:"ingressProfileId,omitempty" tf:"ingress_profile_id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`
}

// NsxtEdgeGatewayRateLimitSpec defines the desired state of NsxtEdgeGatewayRateLimit
type NsxtEdgeGatewayRateLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtEdgeGatewayRateLimitParameters `json:"forProvider"`
}

// NsxtEdgeGatewayRateLimitStatus defines the observed state of NsxtEdgeGatewayRateLimit.
type NsxtEdgeGatewayRateLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtEdgeGatewayRateLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtEdgeGatewayRateLimit is the Schema for the NsxtEdgeGatewayRateLimits API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtEdgeGatewayRateLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGatewayId)",message="edgeGatewayId is a required parameter"
	Spec   NsxtEdgeGatewayRateLimitSpec   `json:"spec"`
	Status NsxtEdgeGatewayRateLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtEdgeGatewayRateLimitList contains a list of NsxtEdgeGatewayRateLimits
type NsxtEdgeGatewayRateLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtEdgeGatewayRateLimit `json:"items"`
}

// Repository type metadata.
var (
	NsxtEdgeGatewayRateLimit_Kind             = "NsxtEdgeGatewayRateLimit"
	NsxtEdgeGatewayRateLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtEdgeGatewayRateLimit_Kind}.String()
	NsxtEdgeGatewayRateLimit_KindAPIVersion   = NsxtEdgeGatewayRateLimit_Kind + "." + CRDGroupVersion.String()
	NsxtEdgeGatewayRateLimit_GroupVersionKind = CRDGroupVersion.WithKind(NsxtEdgeGatewayRateLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtEdgeGatewayRateLimit{}, &NsxtEdgeGatewayRateLimitList{})
}
