/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrgVdcAccessControlObservation struct {

	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is set
	EveryoneAccessLevel *string `json:"everyoneAccessLevel,omitempty" tf:"everyone_access_level,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	SharedWith []SharedWithObservation `json:"sharedWith,omitempty" tf:"shared_with,omitempty"`

	// Whether the VDC is shared with everyone
	SharedWithEveryone *bool `json:"sharedWithEveryone,omitempty" tf:"shared_with_everyone,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type OrgVdcAccessControlParameters struct {

	// Access level when the VDC is shared with everyone (only ReadOnly is available). Required when shared_with_everyone is set
	// +kubebuilder:validation:Optional
	EveryoneAccessLevel *string `json:"everyoneAccessLevel,omitempty" tf:"everyone_access_level,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// +kubebuilder:validation:Optional
	SharedWith []SharedWithParameters `json:"sharedWith,omitempty" tf:"shared_with,omitempty"`

	// Whether the VDC is shared with everyone
	// +kubebuilder:validation:Optional
	SharedWithEveryone *bool `json:"sharedWithEveryone,omitempty" tf:"shared_with_everyone,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type SharedWithObservation struct {

	// The access level for the user or group to which we are sharing. (Only ReadOnly is available)
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// ID of the group to which we are sharing. Required if user_id is not set
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Name of the subject (group or user) with which we are sharing
	SubjectName *string `json:"subjectName,omitempty" tf:"subject_name,omitempty"`

	// ID of the user to which we are sharing. Required if group_id is not set
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type SharedWithParameters struct {

	// The access level for the user or group to which we are sharing. (Only ReadOnly is available)
	// +kubebuilder:validation:Required
	AccessLevel *string `json:"accessLevel" tf:"access_level,omitempty"`

	// ID of the group to which we are sharing. Required if user_id is not set
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// ID of the user to which we are sharing. Required if group_id is not set
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// OrgVdcAccessControlSpec defines the desired state of OrgVdcAccessControl
type OrgVdcAccessControlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgVdcAccessControlParameters `json:"forProvider"`
}

// OrgVdcAccessControlStatus defines the observed state of OrgVdcAccessControl.
type OrgVdcAccessControlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgVdcAccessControlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrgVdcAccessControl is the Schema for the OrgVdcAccessControls API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgVdcAccessControl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.sharedWithEveryone)",message="sharedWithEveryone is a required parameter"
	Spec   OrgVdcAccessControlSpec   `json:"spec"`
	Status OrgVdcAccessControlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgVdcAccessControlList contains a list of OrgVdcAccessControls
type OrgVdcAccessControlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgVdcAccessControl `json:"items"`
}

// Repository type metadata.
var (
	OrgVdcAccessControl_Kind             = "OrgVdcAccessControl"
	OrgVdcAccessControl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgVdcAccessControl_Kind}.String()
	OrgVdcAccessControl_KindAPIVersion   = OrgVdcAccessControl_Kind + "." + CRDGroupVersion.String()
	OrgVdcAccessControl_GroupVersionKind = CRDGroupVersion.WithKind(OrgVdcAccessControl_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgVdcAccessControl{}, &OrgVdcAccessControlList{})
}
