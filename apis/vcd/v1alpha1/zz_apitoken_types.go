/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApiTokenObservation struct {

	// Set this to true if you understand the security risks of using API token files and agree to creating them
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Name of the file that the API token will be saved to
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of API token
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ApiTokenParameters struct {

	// Set this to true if you understand the security risks of using API token files and agree to creating them
	// +kubebuilder:validation:Optional
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Name of the file that the API token will be saved to
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Name of API token
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ApiTokenSpec defines the desired state of ApiToken
type ApiTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApiTokenParameters `json:"forProvider"`
}

// ApiTokenStatus defines the observed state of ApiToken.
type ApiTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApiTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiToken is the Schema for the ApiTokens API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ApiToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.allowTokenFile)",message="allowTokenFile is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.fileName)",message="fileName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   ApiTokenSpec   `json:"spec"`
	Status ApiTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiTokenList contains a list of ApiTokens
type ApiTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiToken `json:"items"`
}

// Repository type metadata.
var (
	ApiToken_Kind             = "ApiToken"
	ApiToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApiToken_Kind}.String()
	ApiToken_KindAPIVersion   = ApiToken_Kind + "." + CRDGroupVersion.String()
	ApiToken_GroupVersionKind = CRDGroupVersion.WithKind(ApiToken_Kind)
)

func init() {
	SchemeBuilder.Register(&ApiToken{}, &ApiTokenList{})
}
