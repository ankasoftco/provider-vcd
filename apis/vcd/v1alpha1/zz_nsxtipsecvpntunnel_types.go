/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtIpsecVpnTunnelObservation struct {

	// One of 'PSK' (default), 'CERTIFICATE'
	AuthenticationMode *string `json:"authenticationMode,omitempty" tf:"authentication_mode,omitempty"`

	// Optional CA certificate ID to use for authentication
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// Optional certificate ID to use for authentication
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Description IP Sec VPN Tunnel
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge gateway name in which IP Sec VPN configuration is located
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Enables or disables this configuration (default true)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Provides more details of failure if the IKE service is not UP
	IkeFailReason *string `json:"ikeFailReason,omitempty" tf:"ike_fail_reason,omitempty"`

	// Status for the actual IKE Session for the given tunnel
	IkeServiceStatus *string `json:"ikeServiceStatus,omitempty" tf:"ike_service_status,omitempty"`

	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	LocalIPAddress *string `json:"localIpAddress,omitempty" tf:"local_ip_address,omitempty"`

	// Set of local networks in CIDR format. At least one value is required
	LocalNetworks []*string `json:"localNetworks,omitempty" tf:"local_networks,omitempty"`

	// Sets whether logging for the tunnel is enabled or not. (default - false)
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Name of IP Sec VPN Tunnel
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Custom remote ID of the peer site. 'remote_ip_address' is used by default
	RemoteID *string `json:"remoteId,omitempty" tf:"remote_id,omitempty"`

	// Public IPv4 Address of the remote device terminating the VPN connection
	RemoteIPAddress *string `json:"remoteIpAddress,omitempty" tf:"remote_ip_address,omitempty"`

	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	RemoteNetworks []*string `json:"remoteNetworks,omitempty" tf:"remote_networks,omitempty"`

	// Security type which is use for IPsec VPN Tunnel. It will be 'DEFAULT' if nothing is customized and 'CUSTOM' if some changes are applied
	SecurityProfile *string `json:"securityProfile,omitempty" tf:"security_profile,omitempty"`

	// Security profile customization
	SecurityProfileCustomization []SecurityProfileCustomizationObservation `json:"securityProfileCustomization,omitempty" tf:"security_profile_customization,omitempty"`

	// Overall IPsec VPN Tunnel Status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtIpsecVpnTunnelParameters struct {

	// One of 'PSK' (default), 'CERTIFICATE'
	// +kubebuilder:validation:Optional
	AuthenticationMode *string `json:"authenticationMode,omitempty" tf:"authentication_mode,omitempty"`

	// Optional CA certificate ID to use for authentication
	// +kubebuilder:validation:Optional
	CACertificateID *string `json:"caCertificateId,omitempty" tf:"ca_certificate_id,omitempty"`

	// Optional certificate ID to use for authentication
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Description IP Sec VPN Tunnel
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge gateway name in which IP Sec VPN configuration is located
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// Enables or disables this configuration (default true)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IPv4 Address for the endpoint. This has to be a sub-allocated IP on the Edge Gateway.
	// +kubebuilder:validation:Optional
	LocalIPAddress *string `json:"localIpAddress,omitempty" tf:"local_ip_address,omitempty"`

	// Set of local networks in CIDR format. At least one value is required
	// +kubebuilder:validation:Optional
	LocalNetworks []*string `json:"localNetworks,omitempty" tf:"local_networks,omitempty"`

	// Sets whether logging for the tunnel is enabled or not. (default - false)
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// Name of IP Sec VPN Tunnel
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Pre-Shared Key (PSK)
	// +kubebuilder:validation:Optional
	PreSharedKeySecretRef v1.SecretKeySelector `json:"preSharedKeySecretRef" tf:"-"`

	// Custom remote ID of the peer site. 'remote_ip_address' is used by default
	// +kubebuilder:validation:Optional
	RemoteID *string `json:"remoteId,omitempty" tf:"remote_id,omitempty"`

	// Public IPv4 Address of the remote device terminating the VPN connection
	// +kubebuilder:validation:Optional
	RemoteIPAddress *string `json:"remoteIpAddress,omitempty" tf:"remote_ip_address,omitempty"`

	// Set of remote networks in CIDR format. Leaving it empty is interpreted as 0.0.0.0/0
	// +kubebuilder:validation:Optional
	RemoteNetworks []*string `json:"remoteNetworks,omitempty" tf:"remote_networks,omitempty"`

	// Security profile customization
	// +kubebuilder:validation:Optional
	SecurityProfileCustomization []SecurityProfileCustomizationParameters `json:"securityProfileCustomization,omitempty" tf:"security_profile_customization,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type SecurityProfileCustomizationObservation struct {

	// Value in seconds of dead probe detection interval. Minimum is 3 seconds and the maximum is 60 seconds
	DpdProbeInternal *float64 `json:"dpdProbeInternal,omitempty" tf:"dpd_probe_internal,omitempty"`

	// Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	IkeDhGroups []*string `json:"ikeDhGroups,omitempty" tf:"ike_dh_groups,omitempty"`

	// Secure hashing algorithms to use during the IKE negotiation. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	IkeDigestAlgorithms []*string `json:"ikeDigestAlgorithms,omitempty" tf:"ike_digest_algorithms,omitempty"`

	// Encryption algorithms. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	IkeEncryptionAlgorithms []*string `json:"ikeEncryptionAlgorithms,omitempty" tf:"ike_encryption_algorithms,omitempty"`

	// Security Association life time (in seconds). It is number of seconds before the IPsec tunnel needs to reestablish
	IkeSaLifetime *float64 `json:"ikeSaLifetime,omitempty" tf:"ike_sa_lifetime,omitempty"`

	// IKE version one of IKE_V1, IKE_V2, IKE_FLEX
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// Policy for handling defragmentation bit. One of COPY, CLEAR
	TunnelDfPolicy *string `json:"tunnelDfPolicy,omitempty" tf:"tunnel_df_policy,omitempty"`

	// Diffie-Hellman groups to be used is PFS is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	TunnelDhGroups []*string `json:"tunnelDhGroups,omitempty" tf:"tunnel_dh_groups,omitempty"`

	// Digest algorithms to be used for message digest. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	TunnelDigestAlgorithms []*string `json:"tunnelDigestAlgorithms,omitempty" tf:"tunnel_digest_algorithms,omitempty"`

	// Encryption algorithms to use in IPSec tunnel establishment. One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128, NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
	TunnelEncryptionAlgorithms []*string `json:"tunnelEncryptionAlgorithms,omitempty" tf:"tunnel_encryption_algorithms,omitempty"`

	// Perfect Forward Secrecy Enabled or Disabled. Default (enabled)
	TunnelPfsEnabled *bool `json:"tunnelPfsEnabled,omitempty" tf:"tunnel_pfs_enabled,omitempty"`

	// Security Association life time (in seconds)
	TunnelSaLifetime *float64 `json:"tunnelSaLifetime,omitempty" tf:"tunnel_sa_lifetime,omitempty"`
}

type SecurityProfileCustomizationParameters struct {

	// Value in seconds of dead probe detection interval. Minimum is 3 seconds and the maximum is 60 seconds
	// +kubebuilder:validation:Optional
	DpdProbeInternal *float64 `json:"dpdProbeInternal,omitempty" tf:"dpd_probe_internal,omitempty"`

	// Diffie-Hellman groups to be used if Perfect Forward Secrecy is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	// +kubebuilder:validation:Required
	IkeDhGroups []*string `json:"ikeDhGroups" tf:"ike_dh_groups,omitempty"`

	// Secure hashing algorithms to use during the IKE negotiation. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// +kubebuilder:validation:Optional
	IkeDigestAlgorithms []*string `json:"ikeDigestAlgorithms,omitempty" tf:"ike_digest_algorithms,omitempty"`

	// Encryption algorithms. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// +kubebuilder:validation:Required
	IkeEncryptionAlgorithms []*string `json:"ikeEncryptionAlgorithms" tf:"ike_encryption_algorithms,omitempty"`

	// Security Association life time (in seconds). It is number of seconds before the IPsec tunnel needs to reestablish
	// +kubebuilder:validation:Optional
	IkeSaLifetime *float64 `json:"ikeSaLifetime,omitempty" tf:"ike_sa_lifetime,omitempty"`

	// IKE version one of IKE_V1, IKE_V2, IKE_FLEX
	// +kubebuilder:validation:Required
	IkeVersion *string `json:"ikeVersion" tf:"ike_version,omitempty"`

	// Policy for handling defragmentation bit. One of COPY, CLEAR
	// +kubebuilder:validation:Optional
	TunnelDfPolicy *string `json:"tunnelDfPolicy,omitempty" tf:"tunnel_df_policy,omitempty"`

	// Diffie-Hellman groups to be used is PFS is enabled. One of GROUP2, GROUP5, GROUP14, GROUP15, GROUP16, GROUP19, GROUP20, GROUP21
	// +kubebuilder:validation:Required
	TunnelDhGroups []*string `json:"tunnelDhGroups" tf:"tunnel_dh_groups,omitempty"`

	// Digest algorithms to be used for message digest. One of SHA1, SHA2_256, SHA2_384, SHA2_512
	// +kubebuilder:validation:Optional
	TunnelDigestAlgorithms []*string `json:"tunnelDigestAlgorithms,omitempty" tf:"tunnel_digest_algorithms,omitempty"`

	// Encryption algorithms to use in IPSec tunnel establishment. One of AES_128, AES_256, AES_GCM_128, AES_GCM_192, AES_GCM_256, NO_ENCRYPTION_AUTH_AES_GMAC_128, NO_ENCRYPTION_AUTH_AES_GMAC_192, NO_ENCRYPTION_AUTH_AES_GMAC_256, NO_ENCRYPTION
	// +kubebuilder:validation:Required
	TunnelEncryptionAlgorithms []*string `json:"tunnelEncryptionAlgorithms" tf:"tunnel_encryption_algorithms,omitempty"`

	// Perfect Forward Secrecy Enabled or Disabled. Default (enabled)
	// +kubebuilder:validation:Optional
	TunnelPfsEnabled *bool `json:"tunnelPfsEnabled,omitempty" tf:"tunnel_pfs_enabled,omitempty"`

	// Security Association life time (in seconds)
	// +kubebuilder:validation:Optional
	TunnelSaLifetime *float64 `json:"tunnelSaLifetime,omitempty" tf:"tunnel_sa_lifetime,omitempty"`
}

// NsxtIpsecVpnTunnelSpec defines the desired state of NsxtIpsecVpnTunnel
type NsxtIpsecVpnTunnelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtIpsecVpnTunnelParameters `json:"forProvider"`
}

// NsxtIpsecVpnTunnelStatus defines the observed state of NsxtIpsecVpnTunnel.
type NsxtIpsecVpnTunnelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtIpsecVpnTunnelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtIpsecVpnTunnel is the Schema for the NsxtIpsecVpnTunnels API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtIpsecVpnTunnel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGatewayId)",message="edgeGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.localIpAddress)",message="localIpAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.localNetworks)",message="localNetworks is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.preSharedKeySecretRef)",message="preSharedKeySecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.remoteIpAddress)",message="remoteIpAddress is a required parameter"
	Spec   NsxtIpsecVpnTunnelSpec   `json:"spec"`
	Status NsxtIpsecVpnTunnelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtIpsecVpnTunnelList contains a list of NsxtIpsecVpnTunnels
type NsxtIpsecVpnTunnelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtIpsecVpnTunnel `json:"items"`
}

// Repository type metadata.
var (
	NsxtIpsecVpnTunnel_Kind             = "NsxtIpsecVpnTunnel"
	NsxtIpsecVpnTunnel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtIpsecVpnTunnel_Kind}.String()
	NsxtIpsecVpnTunnel_KindAPIVersion   = NsxtIpsecVpnTunnel_Kind + "." + CRDGroupVersion.String()
	NsxtIpsecVpnTunnel_GroupVersionKind = CRDGroupVersion.WithKind(NsxtIpsecVpnTunnel_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtIpsecVpnTunnel{}, &NsxtIpsecVpnTunnelList{})
}
