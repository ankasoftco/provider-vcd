/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CatalogObservation struct {

	// True enables early catalog export to optimize synchronization
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled,omitempty"`

	// Catalog version number.
	CatalogVersion *float64 `json:"catalogVersion,omitempty" tf:"catalog_version,omitempty"`

	// Time stamp of when the catalog was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains, regardless of their state.
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal.
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Catalog HREF
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// True if this catalog belongs to the current organization.
	IsLocal *bool `json:"isLocal,omitempty" tf:"is_local,omitempty"`

	// True if this catalog is published.
	IsPublished *bool `json:"isPublished,omitempty" tf:"is_published,omitempty"`

	// True if this catalog is shared.
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// List of Media items in this catalog
	MediaItemList []*string `json:"mediaItemList,omitempty" tf:"media_item_list,omitempty"`

	// Key and value pairs for catalog metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given Catalog
	MetadataEntry []MetadataEntryObservation `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of Medias this catalog contains.
	NumberOfMedia *float64 `json:"numberOfMedia,omitempty" tf:"number_of_media,omitempty"`

	// Number of vApps templates this catalog contains.
	NumberOfVappTemplates *float64 `json:"numberOfVappTemplates,omitempty" tf:"number_of_vapp_templates,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Owner name from the catalog.
	OwnerName *string `json:"ownerName,omitempty" tf:"owner_name,omitempty"`

	// Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary.
	PreserveIdentityInformation *bool `json:"preserveIdentityInformation,omitempty" tf:"preserve_identity_information,omitempty"`

	// True allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation.
	PublishEnabled *bool `json:"publishEnabled,omitempty" tf:"publish_enabled,omitempty"`

	// PUBLISHED if published externally, SUBSCRIBED if subscribed to an external catalog, UNPUBLISHED otherwise.
	PublishSubscriptionType *string `json:"publishSubscriptionType,omitempty" tf:"publish_subscription_type,omitempty"`

	// URL to which other catalogs can subscribe
	PublishSubscriptionURL *string `json:"publishSubscriptionUrl,omitempty" tf:"publish_subscription_url,omitempty"`

	// Optional storage profile ID
	StorageProfileID *string `json:"storageProfileId,omitempty" tf:"storage_profile_id,omitempty"`

	// List of catalog items in this catalog
	VappTemplateList []*string `json:"vappTemplateList,omitempty" tf:"vapp_template_list,omitempty"`
}

type CatalogParameters struct {

	// True enables early catalog export to optimize synchronization
	// +kubebuilder:validation:Optional
	CacheEnabled *bool `json:"cacheEnabled,omitempty" tf:"cache_enabled,omitempty"`

	// When destroying use delete_force=True with delete_recursive=True to remove a catalog and any objects it contains, regardless of their state.
	// +kubebuilder:validation:Optional
	DeleteForce *bool `json:"deleteForce,omitempty" tf:"delete_force,omitempty"`

	// When destroying use delete_recursive=True to remove the catalog and any objects it contains that are in a state that normally allows removal.
	// +kubebuilder:validation:Optional
	DeleteRecursive *bool `json:"deleteRecursive,omitempty" tf:"delete_recursive,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key and value pairs for catalog metadata.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Metadata entries for the given Catalog
	// +kubebuilder:validation:Optional
	MetadataEntry []MetadataEntryParameters `json:"metadataEntry,omitempty" tf:"metadata_entry,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// An optional password to access the catalog. Only ASCII characters are allowed in a valid password.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Include BIOS UUIDs and MAC addresses in the downloaded OVF package. Preserving the identity information limits the portability of the package and you should use it only when necessary.
	// +kubebuilder:validation:Optional
	PreserveIdentityInformation *bool `json:"preserveIdentityInformation,omitempty" tf:"preserve_identity_information,omitempty"`

	// True allows to publish a catalog externally to make its vApp templates and media files available for subscription by organizations outside the Cloud Director installation.
	// +kubebuilder:validation:Optional
	PublishEnabled *bool `json:"publishEnabled,omitempty" tf:"publish_enabled,omitempty"`

	// Optional storage profile ID
	// +kubebuilder:validation:Optional
	StorageProfileID *string `json:"storageProfileId,omitempty" tf:"storage_profile_id,omitempty"`
}

type MetadataEntryObservation struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MetadataEntryParameters struct {

	// Domain for this metadata entry. true if it belongs to SYSTEM, false if it belongs to GENERAL
	// +kubebuilder:validation:Optional
	IsSystem *bool `json:"isSystem,omitempty" tf:"is_system,omitempty"`

	// Key of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Type of this metadata entry. One of: 'MetadataStringValue', 'MetadataNumberValue', 'MetadataBooleanValue', 'MetadataDateTimeValue'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// User access level for this metadata entry. One of: 'READWRITE', 'READONLY', 'PRIVATE'
	// +kubebuilder:validation:Optional
	UserAccess *string `json:"userAccess,omitempty" tf:"user_access,omitempty"`

	// Value of this metadata entry. Required if the metadata entry is not empty
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// CatalogSpec defines the desired state of Catalog
type CatalogSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CatalogParameters `json:"forProvider"`
}

// CatalogStatus defines the observed state of Catalog.
type CatalogStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CatalogObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Catalog is the Schema for the Catalogs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type Catalog struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deleteForce)",message="deleteForce is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deleteRecursive)",message="deleteRecursive is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   CatalogSpec   `json:"spec"`
	Status CatalogStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CatalogList contains a list of Catalogs
type CatalogList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Catalog `json:"items"`
}

// Repository type metadata.
var (
	Catalog_Kind             = "Catalog"
	Catalog_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Catalog_Kind}.String()
	Catalog_KindAPIVersion   = Catalog_Kind + "." + CRDGroupVersion.String()
	Catalog_GroupVersionKind = CRDGroupVersion.WithKind(Catalog_Kind)
)

func init() {
	SchemeBuilder.Register(&Catalog{}, &CatalogList{})
}
