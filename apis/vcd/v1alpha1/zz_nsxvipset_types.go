/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxvIpSetObservation struct {

	// IP set description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of IP address, CIDR, IP range objects
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Allows visibility in underlying scopes (Default is true)
	IsInheritanceAllowed *bool `json:"isInheritanceAllowed,omitempty" tf:"is_inheritance_allowed,omitempty"`

	// IP set name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxvIpSetParameters struct {

	// IP set description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A set of IP address, CIDR, IP range objects
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Allows visibility in underlying scopes (Default is true)
	// +kubebuilder:validation:Optional
	IsInheritanceAllowed *bool `json:"isInheritanceAllowed,omitempty" tf:"is_inheritance_allowed,omitempty"`

	// IP set name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// NsxvIpSetSpec defines the desired state of NsxvIpSet
type NsxvIpSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxvIpSetParameters `json:"forProvider"`
}

// NsxvIpSetStatus defines the observed state of NsxvIpSet.
type NsxvIpSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxvIpSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxvIpSet is the Schema for the NsxvIpSets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxvIpSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipAddresses)",message="ipAddresses is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   NsxvIpSetSpec   `json:"spec"`
	Status NsxvIpSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxvIpSetList contains a list of NsxvIpSets
type NsxvIpSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxvIpSet `json:"items"`
}

// Repository type metadata.
var (
	NsxvIpSet_Kind             = "NsxvIpSet"
	NsxvIpSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxvIpSet_Kind}.String()
	NsxvIpSet_KindAPIVersion   = NsxvIpSet_Kind + "." + CRDGroupVersion.String()
	NsxvIpSet_GroupVersionKind = CRDGroupVersion.WithKind(NsxvIpSet_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxvIpSet{}, &NsxvIpSetList{})
}
