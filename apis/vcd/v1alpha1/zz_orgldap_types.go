/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomSettingsObservation struct {

	// authentication method: one of SIMPLE, MD5DIGEST, NTLM
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// LDAP search base
	BaseDistinguishedName *string `json:"baseDistinguishedName,omitempty" tf:"base_distinguished_name,omitempty"`

	// type of connector: one of OPEN_LDAP, ACTIVE_DIRECTORY
	ConnectorType *string `json:"connectorType,omitempty" tf:"connector_type,omitempty"`

	// Group settings when `ldap_mode` is CUSTOM
	GroupAttributes []GroupAttributesObservation `json:"groupAttributes,omitempty" tf:"group_attributes,omitempty"`

	// True if the LDAP service requires an SSL connection
	IsSSL *bool `json:"isSsl,omitempty" tf:"is_ssl,omitempty"`

	// Port number for LDAP service
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// host name or IP of the LDAP server
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// User settings when `ldap_mode` is CUSTOM
	UserAttributes []UserAttributesObservation `json:"userAttributes,omitempty" tf:"user_attributes,omitempty"`

	// Username to use when logging in to LDAP, specified using LDAP attribute=value pairs (for example: cn="ldap-admin", c="example", dc="com")
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type CustomSettingsParameters struct {

	// authentication method: one of SIMPLE, MD5DIGEST, NTLM
	// +kubebuilder:validation:Required
	AuthenticationMethod *string `json:"authenticationMethod" tf:"authentication_method,omitempty"`

	// LDAP search base
	// +kubebuilder:validation:Optional
	BaseDistinguishedName *string `json:"baseDistinguishedName,omitempty" tf:"base_distinguished_name,omitempty"`

	// type of connector: one of OPEN_LDAP, ACTIVE_DIRECTORY
	// +kubebuilder:validation:Required
	ConnectorType *string `json:"connectorType" tf:"connector_type,omitempty"`

	// Group settings when `ldap_mode` is CUSTOM
	// +kubebuilder:validation:Required
	GroupAttributes []GroupAttributesParameters `json:"groupAttributes" tf:"group_attributes,omitempty"`

	// True if the LDAP service requires an SSL connection
	// +kubebuilder:validation:Optional
	IsSSL *bool `json:"isSsl,omitempty" tf:"is_ssl,omitempty"`

	// Password for the user identified by UserName. This value is never returned by GET. It is inspected on create and modify. On modify, the absence of this element indicates that the password should not be changed
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Port number for LDAP service
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// host name or IP of the LDAP server
	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`

	// User settings when `ldap_mode` is CUSTOM
	// +kubebuilder:validation:Required
	UserAttributes []UserAttributesParameters `json:"userAttributes" tf:"user_attributes,omitempty"`

	// Username to use when logging in to LDAP, specified using LDAP attribute=value pairs (for example: cn="ldap-admin", c="example", dc="com")
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type GroupAttributesObservation struct {

	// LDAP group attribute used to identify a group member
	GroupBackLinkIdentifier *string `json:"groupBackLinkIdentifier,omitempty" tf:"group_back_link_identifier,omitempty"`

	// LDAP attribute that identifies a group as a member of another group. For example, dn
	GroupMembershipIdentifier *string `json:"groupMembershipIdentifier,omitempty" tf:"group_membership_identifier,omitempty"`

	// LDAP attribute to use when getting the members of a group. For example, member
	Membership *string `json:"membership,omitempty" tf:"membership,omitempty"`

	// LDAP attribute to use for the group name. For example, cn
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// LDAP objectClass of which imported groups are members. For example, group
	ObjectClass *string `json:"objectClass,omitempty" tf:"object_class,omitempty"`

	// LDAP attribute to use as the unique identifier for a group. For example, objectGuid
	UniqueIdentifier *string `json:"uniqueIdentifier,omitempty" tf:"unique_identifier,omitempty"`
}

type GroupAttributesParameters struct {

	// LDAP group attribute used to identify a group member
	// +kubebuilder:validation:Optional
	GroupBackLinkIdentifier *string `json:"groupBackLinkIdentifier,omitempty" tf:"group_back_link_identifier,omitempty"`

	// LDAP attribute that identifies a group as a member of another group. For example, dn
	// +kubebuilder:validation:Required
	GroupMembershipIdentifier *string `json:"groupMembershipIdentifier" tf:"group_membership_identifier,omitempty"`

	// LDAP attribute to use when getting the members of a group. For example, member
	// +kubebuilder:validation:Required
	Membership *string `json:"membership" tf:"membership,omitempty"`

	// LDAP attribute to use for the group name. For example, cn
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// LDAP objectClass of which imported groups are members. For example, group
	// +kubebuilder:validation:Required
	ObjectClass *string `json:"objectClass" tf:"object_class,omitempty"`

	// LDAP attribute to use as the unique identifier for a group. For example, objectGuid
	// +kubebuilder:validation:Required
	UniqueIdentifier *string `json:"uniqueIdentifier" tf:"unique_identifier,omitempty"`
}

type OrgLdapObservation struct {

	// Custom settings when `ldap_mode` is CUSTOM
	CustomSettings []CustomSettingsObservation `json:"customSettings,omitempty" tf:"custom_settings,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of LDAP settings (one of NONE, SYSTEM, CUSTOM)
	LdapMode *string `json:"ldapMode,omitempty" tf:"ldap_mode,omitempty"`

	// Organization ID
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`
}

type OrgLdapParameters struct {

	// Custom settings when `ldap_mode` is CUSTOM
	// +kubebuilder:validation:Optional
	CustomSettings []CustomSettingsParameters `json:"customSettings,omitempty" tf:"custom_settings,omitempty"`

	// Type of LDAP settings (one of NONE, SYSTEM, CUSTOM)
	// +kubebuilder:validation:Optional
	LdapMode *string `json:"ldapMode,omitempty" tf:"ldap_mode,omitempty"`

	// Organization ID
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`
}

type UserAttributesObservation struct {

	// LDAP attribute to use for the user's full name. For example, displayName
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// LDAP attribute to use for the user's email address. For example, mail
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// LDAP attribute to use for the user's given name. For example, givenName
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`

	// LDAP attribute that returns the identifiers of all the groups of which the user is a member
	GroupBackLinkIdentifier *string `json:"groupBackLinkIdentifier,omitempty" tf:"group_back_link_identifier,omitempty"`

	// LDAP attribute that identifies a user as a member of a group. For example, dn
	GroupMembershipIdentifier *string `json:"groupMembershipIdentifier,omitempty" tf:"group_membership_identifier,omitempty"`

	// LDAP objectClass of which imported users are members. For example, user or person
	ObjectClass *string `json:"objectClass,omitempty" tf:"object_class,omitempty"`

	// LDAP attribute to use for the user's surname. For example, sn
	Surname *string `json:"surname,omitempty" tf:"surname,omitempty"`

	// LDAP attribute to use for the user's telephone number. For example, telephoneNumber
	Telephone *string `json:"telephone,omitempty" tf:"telephone,omitempty"`

	// LDAP attribute to use as the unique identifier for a user. For example, objectGuid
	UniqueIdentifier *string `json:"uniqueIdentifier,omitempty" tf:"unique_identifier,omitempty"`

	// LDAP attribute to use when looking up a user name to import. For example, userPrincipalName or samAccountName
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserAttributesParameters struct {

	// LDAP attribute to use for the user's full name. For example, displayName
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// LDAP attribute to use for the user's email address. For example, mail
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// LDAP attribute to use for the user's given name. For example, givenName
	// +kubebuilder:validation:Required
	GivenName *string `json:"givenName" tf:"given_name,omitempty"`

	// LDAP attribute that returns the identifiers of all the groups of which the user is a member
	// +kubebuilder:validation:Optional
	GroupBackLinkIdentifier *string `json:"groupBackLinkIdentifier,omitempty" tf:"group_back_link_identifier,omitempty"`

	// LDAP attribute that identifies a user as a member of a group. For example, dn
	// +kubebuilder:validation:Required
	GroupMembershipIdentifier *string `json:"groupMembershipIdentifier" tf:"group_membership_identifier,omitempty"`

	// LDAP objectClass of which imported users are members. For example, user or person
	// +kubebuilder:validation:Required
	ObjectClass *string `json:"objectClass" tf:"object_class,omitempty"`

	// LDAP attribute to use for the user's surname. For example, sn
	// +kubebuilder:validation:Required
	Surname *string `json:"surname" tf:"surname,omitempty"`

	// LDAP attribute to use for the user's telephone number. For example, telephoneNumber
	// +kubebuilder:validation:Required
	Telephone *string `json:"telephone" tf:"telephone,omitempty"`

	// LDAP attribute to use as the unique identifier for a user. For example, objectGuid
	// +kubebuilder:validation:Required
	UniqueIdentifier *string `json:"uniqueIdentifier" tf:"unique_identifier,omitempty"`

	// LDAP attribute to use when looking up a user name to import. For example, userPrincipalName or samAccountName
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// OrgLdapSpec defines the desired state of OrgLdap
type OrgLdapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrgLdapParameters `json:"forProvider"`
}

// OrgLdapStatus defines the observed state of OrgLdap.
type OrgLdapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrgLdapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrgLdap is the Schema for the OrgLdaps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type OrgLdap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ldapMode)",message="ldapMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.orgId)",message="orgId is a required parameter"
	Spec   OrgLdapSpec   `json:"spec"`
	Status OrgLdapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrgLdapList contains a list of OrgLdaps
type OrgLdapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrgLdap `json:"items"`
}

// Repository type metadata.
var (
	OrgLdap_Kind             = "OrgLdap"
	OrgLdap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrgLdap_Kind}.String()
	OrgLdap_KindAPIVersion   = OrgLdap_Kind + "." + CRDGroupVersion.String()
	OrgLdap_GroupVersionKind = CRDGroupVersion.WithKind(OrgLdap_Kind)
)

func init() {
	SchemeBuilder.Register(&OrgLdap{}, &OrgLdapList{})
}
