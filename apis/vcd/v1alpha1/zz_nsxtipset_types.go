/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtIpSetObservation struct {

	// IP Set description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge Gateway name in which IP Set is located
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of IP address, CIDR, IP range objects
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// IP Set name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// ID of VDC or VDC Group
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

type NsxtIpSetParameters struct {

	// IP Set description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Edge Gateway name in which IP Set is located
	// +kubebuilder:validation:Optional
	EdgeGatewayID *string `json:"edgeGatewayId,omitempty" tf:"edge_gateway_id,omitempty"`

	// A set of IP address, CIDR, IP range objects
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// IP Set name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// The name of VDC to use, optional if defined at provider level
	// +kubebuilder:validation:Optional
	Vdc *string `json:"vdc,omitempty" tf:"vdc,omitempty"`
}

// NsxtIpSetSpec defines the desired state of NsxtIpSet
type NsxtIpSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtIpSetParameters `json:"forProvider"`
}

// NsxtIpSetStatus defines the observed state of NsxtIpSet.
type NsxtIpSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtIpSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtIpSet is the Schema for the NsxtIpSets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type NsxtIpSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeGatewayId)",message="edgeGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   NsxtIpSetSpec   `json:"spec"`
	Status NsxtIpSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtIpSetList contains a list of NsxtIpSets
type NsxtIpSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtIpSet `json:"items"`
}

// Repository type metadata.
var (
	NsxtIpSet_Kind             = "NsxtIpSet"
	NsxtIpSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtIpSet_Kind}.String()
	NsxtIpSet_KindAPIVersion   = NsxtIpSet_Kind + "." + CRDGroupVersion.String()
	NsxtIpSet_GroupVersionKind = CRDGroupVersion.WithKind(NsxtIpSet_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtIpSet{}, &NsxtIpSetList{})
}
