/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceAccountObservation struct {

	// Status of the service account.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Name of the file that the API token will be saved to
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of service account
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Role ID of service account
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Any valid UUID, depends on the user, e.g: 12345678-1234-5678-90ab-1234567890ab
	SoftwareID *string `json:"softwareId,omitempty" tf:"software_id,omitempty"`

	// Version of software using the service account, can be freely defined by the user
	SoftwareVersion *string `json:"softwareVersion,omitempty" tf:"software_version,omitempty"`

	// URI of the client using the service account, can be freely defined by the user
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type ServiceAccountParameters struct {

	// Status of the service account.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Set this to true if you understand the security risks of using API token files and would like to suppress the warnings
	// +kubebuilder:validation:Optional
	AllowTokenFile *bool `json:"allowTokenFile,omitempty" tf:"allow_token_file,omitempty"`

	// Name of the file that the API token will be saved to
	// +kubebuilder:validation:Optional
	FileName *string `json:"fileName,omitempty" tf:"file_name,omitempty"`

	// Name of service account
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name of organization to use, optional if defined at provider level. Useful when connected as sysadmin working across different organizations
	// +kubebuilder:validation:Optional
	Org *string `json:"org,omitempty" tf:"org,omitempty"`

	// Role ID of service account
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Any valid UUID, depends on the user, e.g: 12345678-1234-5678-90ab-1234567890ab
	// +kubebuilder:validation:Optional
	SoftwareID *string `json:"softwareId,omitempty" tf:"software_id,omitempty"`

	// Version of software using the service account, can be freely defined by the user
	// +kubebuilder:validation:Optional
	SoftwareVersion *string `json:"softwareVersion,omitempty" tf:"software_version,omitempty"`

	// URI of the client using the service account, can be freely defined by the user
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

// ServiceAccountSpec defines the desired state of ServiceAccount
type ServiceAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAccountParameters `json:"forProvider"`
}

// ServiceAccountStatus defines the observed state of ServiceAccount.
type ServiceAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccount is the Schema for the ServiceAccounts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type ServiceAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleId)",message="roleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.softwareId)",message="softwareId is a required parameter"
	Spec   ServiceAccountSpec   `json:"spec"`
	Status ServiceAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAccountList contains a list of ServiceAccounts
type ServiceAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAccount `json:"items"`
}

// Repository type metadata.
var (
	ServiceAccount_Kind             = "ServiceAccount"
	ServiceAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAccount_Kind}.String()
	ServiceAccount_KindAPIVersion   = ServiceAccount_Kind + "." + CRDGroupVersion.String()
	ServiceAccount_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAccount{}, &ServiceAccountList{})
}
