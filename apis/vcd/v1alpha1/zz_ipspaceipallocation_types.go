/*
Copyright 2023 ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpSpaceIpAllocationObservation struct {

	// Allocation date in ISO 8601 format (e.g. 2023-06-07T09:57:58.721Z)
	AllocationDate *string `json:"allocationDate,omitempty" tf:"allocation_date,omitempty"`

	// Custom description can only be set when usage_state is set to 'USED_MANUAL'
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address part
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// IP address or CIDR
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// IP Space ID for IP Allocation
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Org ID for IP Allocation
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Required if 'type' is IP_PREFIX
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Type of allocation. One of `FLOATING_IP“, `IP_PREFIX`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
	UsageState *string `json:"usageState,omitempty" tf:"usage_state,omitempty"`

	// ID of entity that is using this allocation
	UsedByID *string `json:"usedById,omitempty" tf:"used_by_id,omitempty"`
}

type IpSpaceIpAllocationParameters struct {

	// Custom description can only be set when usage_state is set to 'USED_MANUAL'
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP Space ID for IP Allocation
	// +kubebuilder:validation:Optional
	IPSpaceID *string `json:"ipSpaceId,omitempty" tf:"ip_space_id,omitempty"`

	// Org ID for IP Allocation
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Required if 'type' is IP_PREFIX
	// +kubebuilder:validation:Optional
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// Type of allocation. One of `FLOATING_IP“, `IP_PREFIX`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Can be set to 'USED_MANUAL' to mark the IP Allocation for manual use
	// +kubebuilder:validation:Optional
	UsageState *string `json:"usageState,omitempty" tf:"usage_state,omitempty"`
}

// IpSpaceIpAllocationSpec defines the desired state of IpSpaceIpAllocation
type IpSpaceIpAllocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpSpaceIpAllocationParameters `json:"forProvider"`
}

// IpSpaceIpAllocationStatus defines the observed state of IpSpaceIpAllocation.
type IpSpaceIpAllocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpSpaceIpAllocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpSpaceIpAllocation is the Schema for the IpSpaceIpAllocations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vcd}
type IpSpaceIpAllocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.orgId)",message="orgId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   IpSpaceIpAllocationSpec   `json:"spec"`
	Status IpSpaceIpAllocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpSpaceIpAllocationList contains a list of IpSpaceIpAllocations
type IpSpaceIpAllocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpSpaceIpAllocation `json:"items"`
}

// Repository type metadata.
var (
	IpSpaceIpAllocation_Kind             = "IpSpaceIpAllocation"
	IpSpaceIpAllocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpSpaceIpAllocation_Kind}.String()
	IpSpaceIpAllocation_KindAPIVersion   = IpSpaceIpAllocation_Kind + "." + CRDGroupVersion.String()
	IpSpaceIpAllocation_GroupVersionKind = CRDGroupVersion.WithKind(IpSpaceIpAllocation_Kind)
)

func init() {
	SchemeBuilder.Register(&IpSpaceIpAllocation{}, &IpSpaceIpAllocationList{})
}
